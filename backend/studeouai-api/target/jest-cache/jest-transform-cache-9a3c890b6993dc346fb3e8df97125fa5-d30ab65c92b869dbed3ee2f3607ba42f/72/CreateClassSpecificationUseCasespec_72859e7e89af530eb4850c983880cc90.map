{"file":"/home/leo/Documentos/projetos/mine/TCC/StudeoUAI/backend/studeouai-api/src/modules/class/useCases/createClassSpecification/CreateClassSpecificationUseCase.spec.ts","mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,yGAAwG;AACxG,2HAAyH;AACzH,oDAAmD;AAEnD,qFAAoF;AAEpF,IAAI,+BAAgE,CAAC;AACrE,IAAI,uBAAgD,CAAC;AACrD,IAAI,+BAAgE,CAAC;AAErE,IAAM,SAAS,GAAG;IAChB,IAAI,EAAE,YAAY;IAClB,WAAW,EAAE,aAAa;IAC1B,WAAW,EAAE,UAAU;CACxB,CAAC;AAEF,QAAQ,CAAC,4BAA4B,EAAE;IACrC,UAAU,CAAC;QACT,uBAAuB,GAAG,IAAI,iDAAuB,EAAE,CAAC;QACxD,+BAA+B,GAAG,IAAI,kEAA+B,EAAE,CAAC;QACxE,+BAA+B,GAAG,IAAI,iEAA+B,CACnE,uBAAuB,EACvB,+BAA+B,CAChC,CAAC;IACJ,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,sDAAsD,EAAE;;;;;oBACnD,kBAAkB,GAAG,EAAE,CAAC;oBAEf,qBAAM,uBAAuB,CAAC,MAAM,CAAC,SAAS,CAAC,EAAA;;oBAAxD,MAAM,GAAG,SAA+C;oBAE9D,uCAAuC;oBACvC,KAAS,CAAC,GAAG,CAAC,EAAE,CAAC,IAAI,CAAC,EAAE,CAAC,EAAE,EAAE;wBAC3B,+BAA+B;6BAC5B,MAAM,CAAC;4BACN,IAAI,EAAE,oBAAiB,CAAC,GAAG,CAAC,CAAE;4BAC9B,WAAW,EAAE,yBAAsB,CAAC,GAAG,CAAC,CAAE;yBAC3C,CAAC;6BACD,IAAI,CAAC,UAAC,aAAa;4BAClB,kBAAkB,CAAC,IAAI,CAAC,aAAa,CAAC,EAAE,CAAC,CAAC;wBAC5C,CAAC,CAAC,CAAC;qBACN;oBAE2B,qBAAM,+BAA+B,CAAC,OAAO,CAAC;4BACxE,QAAQ,EAAE,MAAM,CAAC,EAAE;4BACnB,kBAAkB,oBAAA;yBACnB,CAAC,EAAA;;oBAHI,mBAAmB,GAAG,SAG1B;oBAEF,MAAM,CAAC,mBAAmB,CAAC,cAAc,CAAC,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC;;;;SAC5D,CAAC,CAAC;IAEH,EAAE,CAAC,mEAAmE,EAAE;;YACtE,MAAM,CAAC;;;;;4BACC,QAAQ,GAAG,KAAK,CAAC;4BACjB,kBAAkB,GAAG,CAAC,KAAK,EAAE,KAAK,CAAC,CAAC;4BAE1C,qBAAM,+BAA+B,CAAC,OAAO,CAAC;oCAC5C,QAAQ,UAAA;oCACR,kBAAkB,oBAAA;iCACnB,CAAC,EAAA;;4BAHF,SAGE,CAAC;;;;iBACJ,CAAC,CAAC,OAAO,CAAC,cAAc,CAAC,mBAAQ,CAAC,CAAC;;;SACrC,CAAC,CAAC;IAEH,EAAE,CAAC,iEAAiE,EAAE;;YACpE,MAAM,CAAC;;;;gCACU,qBAAM,uBAAuB,CAAC,MAAM,CAAC,SAAS,CAAC,EAAA;;4BAAxD,MAAM,GAAG,SAA+C;4BACxD,kBAAkB,GAAG,CAAC,KAAK,EAAE,KAAK,CAAC,CAAC;4BAE1C,qBAAM,+BAA+B,CAAC,OAAO,CAAC;oCAC5C,QAAQ,EAAE,MAAM,CAAC,EAAE;oCACnB,kBAAkB,oBAAA;iCACnB,CAAC,EAAA;;4BAHF,SAGE,CAAC;;;;iBACJ,CAAC,CAAC,OAAO,CAAC,cAAc,CAAC,mBAAQ,CAAC,CAAC;;;SACrC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","names":[],"sources":["/home/leo/Documentos/projetos/mine/TCC/StudeoUAI/backend/studeouai-api/src/modules/class/useCases/createClassSpecification/CreateClassSpecificationUseCase.spec.ts"],"sourcesContent":["import { ClassRepositoryInMemory } from \"@modules/class/repositories/in-memory/ClassRepositoryInMemory\";\nimport { SpecificationRepositoryInMemory } from \"@modules/class/repositories/in-memory/SpecificationsRepositoryInMemory\";\nimport { AppError } from \"@shared/errors/appError\";\n\nimport { CreateClassSpecificationUseCase } from \"./CreateClassSpecificationUseCase\";\n\nlet createClassSpecificationUseCase: CreateClassSpecificationUseCase;\nlet classRepositoryInMemory: ClassRepositoryInMemory;\nlet specificationRepositoryInMemory: SpecificationRepositoryInMemory;\n\nconst classMock = {\n  name: \"Class Name\",\n  description: \"Description\",\n  category_id: \"Category\",\n};\n\ndescribe(\"Create Class Specification\", () => {\n  beforeEach(() => {\n    classRepositoryInMemory = new ClassRepositoryInMemory();\n    specificationRepositoryInMemory = new SpecificationRepositoryInMemory();\n    createClassSpecificationUseCase = new CreateClassSpecificationUseCase(\n      classRepositoryInMemory,\n      specificationRepositoryInMemory\n    );\n  });\n\n  it(\"Should be able to add a new specification to a class\", async () => {\n    const specifications_ids = [];\n\n    const _class = await classRepositoryInMemory.create(classMock);\n\n    // eslint-disable-next-line no-plusplus\n    for (let i = 0; i <= 1; i++) {\n      specificationRepositoryInMemory\n        .create({\n          name: `Specification ${i + 1}`,\n          description: `Specification Test ${i + 1}`,\n        })\n        .then((specification) => {\n          specifications_ids.push(specification.id);\n        });\n    }\n\n    const specificationsClass = await createClassSpecificationUseCase.execute({\n      class_id: _class.id,\n      specifications_ids,\n    });\n\n    expect(specificationsClass.specifications).toHaveLength(2);\n  });\n\n  it(\"Should not be able to add a new specification to inexistent class\", async () => {\n    expect(async () => {\n      const class_id = \"123\";\n      const specifications_ids = [\"456\", \"789\"];\n\n      await createClassSpecificationUseCase.execute({\n        class_id,\n        specifications_ids,\n      });\n    }).rejects.toBeInstanceOf(AppError);\n  });\n\n  it(\"Should not be able to add a inexistent specification to a class\", async () => {\n    expect(async () => {\n      const _class = await classRepositoryInMemory.create(classMock);\n      const specifications_ids = [\"456\", \"789\"];\n\n      await createClassSpecificationUseCase.execute({\n        class_id: _class.id,\n        specifications_ids,\n      });\n    }).rejects.toBeInstanceOf(AppError);\n  });\n});\n"],"version":3}