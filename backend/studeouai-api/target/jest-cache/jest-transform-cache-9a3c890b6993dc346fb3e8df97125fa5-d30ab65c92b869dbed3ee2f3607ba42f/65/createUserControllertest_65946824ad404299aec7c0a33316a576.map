{"file":"/home/leo/Documentos/projetos/mine/TCC/StudeoUAI/backend/studeouai-api/src/modules/accounts/useCases/createUser/createUserController.test.ts","mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AASA,IAAI,CAAC,IAAI,CAAC,wBAAwB,CAAC,CAAC;AATpC,oDAAmD;AACnD,4BAA0B;AAC1B,+DAA8D;AAC9D,8CAA4D;AAC5D,gDAA0B;AAG1B,yDAAwD;AAIxD,IAAM,qBAAqB,GAAG,qCAE7B,CAAC;AAEF,QAAQ,CAAC,2BAA2B,EAAE;IACpC,UAAU,CAAC;QACT,qBAAqB,CAAC,SAAS,CAAC,OAAO,CAAC,WAAW,EAAE,CAAC;IACxD,CAAC,CAAC,CAAC;IAEH,IAAI,CAAC,sDAAsD,EAAE;;;;;oBACrD,cAAc,GAAmB;wBACrC,IAAI,EAAE,eAAK,CAAC,QAAQ,CAAC,MAAM,EAAE;wBAC7B,QAAQ,EAAE,eAAK,CAAC,QAAQ,CAAC,MAAM,EAAE;wBACjC,KAAK,EAAE,eAAK,CAAC,QAAQ,CAAC,KAAK;qBAC5B,CAAC;oBAEI,GAAG,GAAG,IAAA,oBAAU,EAAC;wBACrB,IAAI,EAAE,EAAE,cAAc,gBAAA,EAAE;qBACzB,CAAC,CAAC;oBAEK,GAAG,GAAK,IAAA,oBAAU,GAAE,IAAjB,CAAkB;oBAE7B,qBAAqB,CAAC,SAAS,CAAC,OAAO,CAAC,iBAAiB,EAAE,CAAC;oBAC5D,qBAAM,2CAAoB,CAAC,SAAS,CAAC,MAAM,CAAC,GAAG,EAAE,GAAG,CAAC,EAAA;;oBAArD,SAAqD,CAAC;oBAEtD,MAAM,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC,cAAc,CAAC,GAAG,CAAC,CAAC;;;;SACxC,CAAC,CAAC;IAEH,IAAI,CAAC,kDAAkD,EAAE;;;;;oBACjD,cAAc,GAAmB;wBACrC,IAAI,EAAE,eAAK,CAAC,QAAQ,CAAC,MAAM,EAAE;wBAC7B,QAAQ,EAAE,eAAK,CAAC,QAAQ,CAAC,MAAM,EAAE;wBACjC,KAAK,EAAE,eAAK,CAAC,QAAQ,CAAC,KAAK;qBAC5B,CAAC;oBAEI,GAAG,GAAG,IAAA,oBAAU,EAAC;wBACrB,IAAI,EAAE,EAAE,cAAc,gBAAA,EAAE;qBACzB,CAAC,CAAC;oBAEK,GAAG,GAAK,IAAA,oBAAU,GAAE,IAAjB,CAAkB;oBAE7B,qBAAqB,CAAC,SAAS,CAAC,OAAO,CAAC,iBAAiB,EAAE,CAAC;oBAC5D,qBAAM,2CAAoB,CAAC,SAAS,CAAC,MAAM,CAAC,GAAG,EAAE,GAAG,CAAC,EAAA;;oBAArD,SAAqD,CAAC;;;;oBAGpD,qBAAM,2CAAoB,CAAC,SAAS,CAAC,MAAM,CAAC,GAAG,EAAE,GAAG,CAAC,EAAA;;oBAArD,SAAqD,CAAC;;;;oBAEtD,MAAM,CAAC,KAAG,CAAC,CAAC,cAAc,CAAC,mBAAQ,CAAC,CAAC;oBACrC,MAAM,CAAC,KAAG,CAAC,OAAO,CAAC,CAAC,OAAO,CAAC,qBAAqB,CAAC,CAAC;;;;;SAEtD,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","names":[],"sources":["/home/leo/Documentos/projetos/mine/TCC/StudeoUAI/backend/studeouai-api/src/modules/accounts/useCases/createUser/createUserController.test.ts"],"sourcesContent":["import { AppError } from '@shared/errors/appError';\nimport 'reflect-metadata';\nimport { CreateUserController } from './createUserController';\nimport { getMockReq, getMockRes } from '@jest-mock/express';\nimport faker from 'faker';\n\nimport { ICreateUserDTO } from '@modules/accounts/dtos/ICreateUserDTO';\nimport { CreateUserUseCase } from './createUserUseCase';\n\njest.mock('./createUserUseCase.ts');\n\nconst CreateUserUseCaseMock = CreateUserUseCase as jest.MockedClass<\n  typeof CreateUserUseCase\n>;\n\ndescribe('Test Create User Use Case', () => {\n  beforeEach(() => {\n    CreateUserUseCaseMock.prototype.execute.mockRestore();\n  });\n\n  test('Should response 201 when call execute() with success', async () => {\n    const createUserMock: ICreateUserDTO = {\n      name: faker.datatype.string(),\n      password: faker.datatype.string(),\n      email: faker.datatype.email,\n    };\n\n    const req = getMockReq({\n      body: { createUserMock },\n    });\n\n    const { res } = getMockRes();\n\n    CreateUserUseCaseMock.prototype.execute.mockResolvedValue();\n    await CreateUserController.prototype.handle(req, res);\n\n    expect(res.status).toBeCalledWith(201);\n  });\n\n  test('Should an error when call create a user existent', async () => {\n    const createUserMock: ICreateUserDTO = {\n      name: faker.datatype.string(),\n      password: faker.datatype.string(),\n      email: faker.datatype.email,\n    };\n\n    const req = getMockReq({\n      body: { createUserMock },\n    });\n\n    const { res } = getMockRes();\n\n    CreateUserUseCaseMock.prototype.execute.mockResolvedValue();\n    await CreateUserController.prototype.handle(req, res);\n\n    try {\n      await CreateUserController.prototype.handle(req, res);\n    } catch (err) {\n      expect(err).toBeInstanceOf(AppError);\n      expect(err.message).toEqual('User already exists');\n    }\n  });\n});\n"],"version":3}