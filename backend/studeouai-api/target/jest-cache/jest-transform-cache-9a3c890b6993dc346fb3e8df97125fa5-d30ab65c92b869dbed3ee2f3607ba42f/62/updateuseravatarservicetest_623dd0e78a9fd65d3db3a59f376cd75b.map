{"file":"/home/leo/Documentos/projetos/mine/TCC/StudeoUAI/backend/studeouai-api/src/modules/accounts/services/update-user-avatar-service.test.ts","mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,sDAAoD;AACpD,gEAAiE;AAEjE,2EAAuE;AAEvE,gDAA0B;AAK1B,QAAQ,CAAC,yBAAyB,EAAE;IAClC,UAAU,CAAC;QACT,6BAAc,CAAC,MAAM,CAAC,WAAW,EAAE,CAAC;QACpC,6BAAc,CAAC,OAAO,CAAC,WAAW,EAAE,CAAC;IACvC,CAAC,CAAC,CAAC;IAEH,IAAI,CAAC,oDAAoD,EAAE;;;;;oBACnD,oBAAoB,GAAiB;wBACzC,EAAE,EAAE,eAAK,CAAC,QAAQ,CAAC,IAAI,EAAE;wBACzB,IAAI,EAAE,eAAK,CAAC,QAAQ,CAAC,MAAM,EAAE;wBAC7B,QAAQ,EAAE,eAAK,CAAC,QAAQ,CAAC,MAAM,EAAE;wBACjC,KAAK,EAAE,eAAK,CAAC,QAAQ,CAAC,KAAK,EAAE;wBAC7B,OAAO,EAAE,KAAK;wBACd,MAAM,EAAE,eAAK,CAAC,QAAQ,CAAC,MAAM,EAAE;wBAC/B,UAAU,EAAE,eAAK,CAAC,QAAQ,CAAC,MAAM,EAAE;qBACpC,CAAC;oBAEI,cAAc,GAAsB;wBACxC,IAAI,EAAE,eAAK,CAAC,QAAQ,CAAC,IAAI,EAAE;wBAC3B,QAAQ,EAAE,eAAK,CAAC,QAAQ,CAAC,IAAI,EAAE;wBAC/B,KAAK,EAAE,eAAK,CAAC,QAAQ,CAAC,KAAK,EAAE;qBAC9B,CAAC;oBAEI,UAAU,GAA4B;wBAC1C,OAAO,EAAE,eAAK,CAAC,QAAQ,CAAC,IAAI,EAAE;wBAC9B,WAAW,EAAE,eAAK,CAAC,QAAQ,CAAC,MAAM,EAAE;qBACrC,CAAC;oBAEF,6BAAc,CAAC,MAAM,CAAC,iBAAiB,CAAC,oBAAoB,CAAC,CAAC;oBAGxD,gBAAgB,GAAG,IAAI,oDAAuB,EAAE,CAAC;oBAGtC,qBAAM,gBAAgB,CAAC,gBAAgB,CAAC,UAAU,CAAC,EAAA;;oBAA9D,QAAQ,GAAG,SAAmD;oBAEpE,MAAM,CAAC,QAAQ,CAAC,CAAC,UAAU,EAAE,CAAC;;;;SAC/B,CAAC,CAAC;IAEH,IAAI,CAAC,qDAAqD,EAAE;;;;;oBACpD,uBAAuB,GAAG,IAAI,oDAAuB,EAAE,CAAC;oBAExD,UAAU,GAA4B;wBAC1C,OAAO,EAAE,eAAK,CAAC,QAAQ,CAAC,IAAI,EAAE;wBAC9B,WAAW,EAAE,eAAK,CAAC,QAAQ,CAAC,MAAM,EAAE;qBACrC,CAAC;oBAEF,6BAAc,CAAC,OAAO,CAAC,iBAAiB,CACtC,IAAI,oBAAQ,CAAC,gBAAgB,EAAE,GAAG,CAAC,CACpC,CAAC;;;;oBAGA,qBAAM,uBAAuB,CAAC,gBAAgB,CAAC,UAAU,CAAC,EAAA;;oBAA1D,SAA0D,CAAC;;;;oBAE3D,MAAM,CAAC,OAAK,CAAC,OAAO,CAAC,CAAC,OAAO,CAAC,gBAAgB,CAAC,CAAC;;;;;SAEnD,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","names":[],"sources":["/home/leo/Documentos/projetos/mine/TCC/StudeoUAI/backend/studeouai-api/src/modules/accounts/services/update-user-avatar-service.test.ts"],"sourcesContent":["import { AppError } from '@shared/errors/app-error';\nimport { repositoryMock } from '@modules/test/mock/typeorm.mock';\nimport { UpdateUserAvatarRequest } from '../models/update-avatar-request';\nimport { UpdateUserAvatarService } from './update-user-avatar-service';\n\nimport faker from 'faker';\nimport { UserResponse } from '../models/user-response';\nimport { CreateUserRequest } from '../models/create-user-request';\nimport { UserService } from './user-service';\n\ndescribe('Test update user avatar', () => {\n  beforeEach(() => {\n    repositoryMock.create.mockRestore();\n    repositoryMock.findOne.mockRestore();\n  });\n\n  test('Should not a error when call to updateAvatarUser()', async () => {\n    const createUserReturnMock: UserResponse = {\n      id: faker.datatype.uuid(),\n      name: faker.datatype.string(),\n      password: faker.datatype.string(),\n      email: faker.internet.email(),\n      isAdmin: false,\n      avatar: faker.datatype.string(),\n      avatar_url: faker.datatype.string(),\n    };\n\n    const createUserMock: CreateUserRequest = {\n      name: faker.datatype.uuid(),\n      password: faker.datatype.uuid(),\n      email: faker.internet.email(),\n    };\n\n    const updateMock: UpdateUserAvatarRequest = {\n      user_id: faker.datatype.uuid(),\n      avatar_file: faker.datatype.string(),\n    };\n\n    repositoryMock.create.mockResolvedValue(createUserReturnMock);\n\n    // const userService = new UserService();\n    const updateAvatarUser = new UpdateUserAvatarService();\n\n    //await userService.createUser(createUserMock);\n    const response = await updateAvatarUser.updateAvatarUser(updateMock);\n\n    expect(response).toBeTruthy();\n  });\n\n  test('Should return error when call to updateAvatarUser()', async () => {\n    const updateUserAvatarService = new UpdateUserAvatarService();\n\n    const updateMock: UpdateUserAvatarRequest = {\n      user_id: faker.datatype.uuid(),\n      avatar_file: faker.datatype.string(),\n    };\n\n    repositoryMock.findOne.mockRejectedValue(\n      new AppError('User not found', 404),\n    );\n\n    try {\n      await updateUserAvatarService.updateAvatarUser(updateMock);\n    } catch (error) {\n      expect(error.message).toEqual('User not found');\n    }\n  });\n});\n"],"version":3}