{"file":"/home/leo/Documentos/projetos/mine/TCC/StudeoUAI/backend/studeouai-api/src/modules/accounts/services/CreateUserService.test.ts","mappings":"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","names":[],"sources":["/home/leo/Documentos/projetos/mine/TCC/StudeoUAI/backend/studeouai-api/src/modules/accounts/services/CreateUserService.test.ts"],"sourcesContent":["import { repositoryMock } from '@modules/test/mock/typeorm.mock';\nimport CreateUserRequest from '../models/CreateUserRequest';\nimport CreateUserResponse from '../models/CreateUserResponse';\nimport CreateUserService from './CreateUserService';\n\nimport faker from 'faker';\nimport { AppError } from '@shared/errors/appError';\n\ndescribe('Test Pending Transaction Service', () => {\n  beforeEach(() => {\n    repositoryMock.find.mockRestore();\n    repositoryMock.findOne.mockRestore();\n    repositoryMock.save.mockRestore();\n    repositoryMock.update.mockRestore();\n  });\n\n  test('Should return response object when call to create with success', async () => {\n    const createUserReturnMock: CreateUserResponse = {\n      id: faker.datatype.uuid(),\n      name: faker.datatype.string(),\n      password: faker.datatype.string(),\n      email: faker.internet.email(),\n      isAdmin: false,\n      avatar: faker.datatype.string(),\n      avatar_url: faker.datatype.string(),\n    };\n\n    const createUserMock: CreateUserRequest = {\n      name: faker.datatype.uuid(),\n      password: faker.datatype.uuid(),\n      email: faker.internet.email(),\n      isAdmin: false,\n      avatar: faker.datatype.string(),\n    };\n\n    repositoryMock.create.mockResolvedValue(createUserReturnMock);\n\n    const createUserService = new CreateUserService();\n    const response = await createUserService.execute(createUserMock);\n\n    expect(response).toBe(createUserReturnMock);\n    expect(response).toBeTruthy();\n  });\n\n  test('Should error when try create a exists user', async () => {\n    const createUserReturnMock: CreateUserResponse = {\n      id: faker.datatype.uuid(),\n      name: faker.datatype.string(),\n      password: faker.datatype.string(),\n      email: faker.internet.email(),\n      isAdmin: false,\n      avatar: faker.datatype.string(),\n      avatar_url: faker.datatype.string(),\n    };\n\n    const createUserMock: CreateUserRequest = {\n      name: faker.datatype.uuid(),\n      password: faker.datatype.uuid(),\n      email: faker.internet.email(),\n      isAdmin: false,\n      avatar: faker.datatype.string(),\n    };\n\n    repositoryMock.create.mockResolvedValue(createUserReturnMock);\n\n    const createUserService = new CreateUserService();\n    createUserService.execute(createUserMock);\n    try {\n      createUserService.execute(createUserMock);\n    } catch (err) {\n      console.log(err);\n      expect(err).toBeInstanceOf(AppError);\n      expect(err.message).toEqual('User already exists');\n    }\n  });\n});\n"],"version":3}