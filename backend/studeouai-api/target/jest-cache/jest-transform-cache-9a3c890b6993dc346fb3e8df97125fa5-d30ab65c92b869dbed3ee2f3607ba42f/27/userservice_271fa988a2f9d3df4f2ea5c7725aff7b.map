{"version":3,"sources":["/home/leo/Documentos/projetos/mine/TCC/StudeoUAI/backend/studeouai-api/src/modules/accounts/services/user-service.ts"],"names":[],"mappingskBAAA;AAAA;AAAA,2BAAA,OAAA,CAAA,0CAAA,CAAA,CAAA;AAEA,IAAA,WAAA;AAAA;AAAA,2BAAA,YAAA;AAAA;AAAA;;AAAA,WAAA,WAAA,GAAA;AAAA;AAAA;AA0CC;;AA1CD;AAAA;;AACQ,EAAA,WAAA,CAAA,SAAA,CAAA,UAAA,GAAN,UAAiB,EAAjB,EAIoB;AAAA;AAAA;QAHlB,IAAI;AAAA;AAAA,+BAAA,EAAA,CAAA,IAAA,C;QACJ,QAAQ;AAAA;AAAA,+BAAA,EAAA,CAAA,QAAA,C;QACR,KAAK;AAAA;AAAA,+BAAA,EAAA,CAAA,KAAA,C;;AACa;AAAA;;;;;;;;;;;;;;;;;;AACZ,YAAA,eAAe,GAAG,CAAA,GAAA,SAAA,CAAA,mBAAA,EAAoB,kBAAA,CAAA,eAApB,CAAlB;;;;AACc,mBAAA,CAAA;AAAA;AAAA,cAAM,eAAe,CAAC,WAAhB,CAA4B,KAA5B,CAAN,CAAA;;;;;;AAAd,YAAA,WAAW,GAAG,EAAA,CAAA,IAAA,EAAd;;;;;AAEN,gBAAI,WAAJ,EAAiB;AAAA;AAAA;AAAA;AACf,oBAAM,IAAI,WAAA,CAAA,QAAJ,CAAa,6BAAb,CAAN;AACD,aAFD;AAAA;AAAA;AAAA;AAAA;;;AAIqB,mBAAA,CAAA;AAAA;AAAA,cAAM,CAAA,GAAA,UAAA,CAAA,IAAA,EACzB,QADyB,EAEzB,MAAM,CAAC,OAAO,CAAC,GAAR,CAAY,kBAAb,CAFmB,CAAN,CAAA;;;;;;AAAf,YAAA,YAAY,GAAG,EAAA,CAAA,IAAA,EAAf;;;;AAKO,mBAAA,CAAA;AAAA;AAAA,cAAM,eAAe,CAAC,MAAhB,CAAuB;AACxC,cAAA,IAAI,EAAA,IADoC;AAExC,cAAA,QAAQ,EAAE,YAF8B;AAGxC,cAAA,KAAK,EAAA,KAHmC;AAIxC,cAAA,OAAO,EAAE,KAJ+B;AAKxC,cAAA,MAAM,EAAE;AALgC,aAAvB,CAAN,CAAA;;;;;;AAAP,YAAA,IAAI,GAAG,EAAA,CAAA,IAAA,EAAP;;;;AAQN,mBAAA,CAAA;AAAA;AAAA,cAAM,eAAe,CAAC,IAAhB,CAAqB,IAArB,CAAN,CAAA;;;;;;;AAAA,YAAA,EAAA,CAAA,IAAA;;;;AAEA,mBAAA,CAAA;AAAA;AAAA,cAAO,IAAP,CAAA;;;;AACD,GA5BK;;AADR;AAAA;;AA+BQ,EAAA,WAAA,CAAA,SAAA,CAAA,YAAA,GAAN,UAAmB,EAAnB,EAA6B;AAAA;AAAA;AAAA;;;;;;;;;;;;;;;;;;AACrB,YAAA,cAAc,GAAG,CAAA,GAAA,SAAA,CAAA,mBAAA,EAAoB,kBAAA,CAAA,eAApB,CAAjB;;;;AAEO,mBAAA,CAAA;AAAA;AAAA,cAAM,cAAc,CAAC,OAAf,CAAuB,EAAvB,CAAN,CAAA;;;;;;AAAP,YAAA,IAAI,GAAG,EAAA,CAAA,IAAA,EAAP;;;;;AAEN,gBAAI,CAAC,IAAL,EAAW;AAAA;AAAA;AAAA;AACT,oBAAM,IAAI,WAAA,CAAA,QAAJ,CAAa,gBAAb,EAA+B,GAA/B,CAAN;AACD,aAFD;AAAA;AAAA;AAAA;AAAA;;;AAIA,mBAAA,CAAA;AAAA;AAAA,cAAO,IAAP,CAAA;;;;AACD,GAVK;;AA/BR;AAAA;AA0CA,SAAA,WAAA;AAAC,CA1CD,EAAA,CAAA;;;;AAAa,OAAA,CAAA,WAAA,GAAA,WAAA","sourcesContent":["import { AppError } from '@shared/errors/app-error';\nimport { hash } from 'bcryptjs';\nimport { getCustomRepository, Repository } from 'typeorm';\nimport { CreateUserRequest } from '../models/create-user-request';\nimport { User } from '../typeorm/entities/user';\nimport { UsersRepository } from '../typeorm/repositories/users-repository';\n\nexport class UserService {\n  async createUser({\n    name,\n    password,\n    email,\n  }: CreateUserRequest): Promise<User> {\n    const usersRepository = getCustomRepository(UsersRepository);\n    const emailExists = await usersRepository.findByEmail(email);\n\n    if (emailExists) {\n      throw new AppError('Email address already used.');\n    }\n\n    const passwordHash = await hash(\n      password,\n      Number(process.env.DEFAULT_HASH_SAULT),\n    );\n\n    const user = await usersRepository.create({\n      name,\n      password: passwordHash,\n      email,\n      isAdmin: false,\n      avatar: null,\n    });\n\n    await usersRepository.save(user);\n\n    return user;\n  }\n\n  async findUserById(id: string): Promise<User> {\n    const userRepository = getCustomRepository(UsersRepository);\n\n    const user = await userRepository.findOne(id);\n\n    if (!user) {\n      throw new AppError('User not found', 404);\n    }\n\n    return user;\n  }\n}\n"]}