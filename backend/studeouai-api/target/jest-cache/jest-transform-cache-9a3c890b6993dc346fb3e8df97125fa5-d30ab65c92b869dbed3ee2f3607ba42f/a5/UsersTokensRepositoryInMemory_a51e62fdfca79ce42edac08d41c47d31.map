{"version":3,"sources":["/home/leo/Documentos/projetos/mine/TCC/StudeoUAI/backend/studeouai-api/src/modules/accounts/repositories/in-memory/UsersTokensRepositoryInMemory.ts"],"names":[],"mappingsqDAAA,CAAA,CAAA;AAIA,IAAA,6BAAA;AAAA;AAAA,2BAAA,YAAA;AAAA;AAAA;;AAAA,WAAA,6BAAA,GAAA;AAAA;AAAA;AAAA;AACU,SAAA,WAAA,GAA6B,EAA7B;AAgCT;;AAjCD;AAAA;;AAGQ,EAAA,6BAAA,CAAA,SAAA,CAAA,MAAA,GAAN,UAAa,IAAb,EAAsC;AAAA;AAAA;AAAA;;;;;;;;;;;;AAC9B,QAAA,SAAS,GAAG,IAAI,YAAA,CAAA,WAAJ,EAAZ;;;;AACN,QAAA,MAAM,CAAC,MAAP,CAAc,SAAd,EAAyB,IAAzB;;;;AACA,aAAK,WAAL,CAAiB,IAAjB,CAAsB,SAAtB;;;;AACA,eAAA,CAAA;AAAA;AAAA,UAAO,SAAP,CAAA;;;AACD,GALK;;AAHR;AAAA;;AAUQ,EAAA,6BAAA,CAAA,SAAA,CAAA,2BAAA,GAAN,UACE,OADF,EAEE,aAFF,EAEuB;AAAA;AAAA;AAAA;;;;;;;;;AAErB,eAAA,CAAA;AAAA;AAAA,UAAO,KAAK,WAAL,CAAiB,IAAjB,CACL,UAAC,SAAD,EAAU;AAAA;AAAA;AAAA;AACR,iBAAA;AAAA;AAAA,0CAAA,SAAS,CAAC,OAAV,KAAsB,OAAtB;AAAA;AAAA,0CACA,SAAS,CAAC,aAAV,KAA4B,aAD5B;AAAA;AACyC,SAHtC,CAAP,CAAA;;;AAKD,GATK;;AAVR;AAAA;;AAqBQ,EAAA,6BAAA,CAAA,SAAA,CAAA,kBAAA,GAAN,UAAyB,KAAzB,EAAsC;AAAA;AAAA;AAAA;;;;;;;;;AACpC,eAAA,CAAA;AAAA;AAAA,UAAO,KAAK,WAAL,CAAiB,IAAjB,CACL,UAAC,SAAD,EAAU;AAAA;AAAA;AAAA;AAAK,iBAAA,SAAS,CAAC,aAAV,KAAA,KAAA;AAAiC,SAD3C,CAAP,CAAA;;;AAGD,GAJK;;AArBR;AAAA;;AA2BQ,EAAA,6BAAA,CAAA,SAAA,CAAA,UAAA,GAAN,UAAiB,EAAjB,EAA2B;AAAA;AAAA;AAAA;;;;;;;;;;;;AACnB,QAAA,cAAc,GAAG,KAAK,WAAL,CAAiB,SAAjB,CACrB,UAAC,SAAD,EAAU;AAAA;AAAA;AAAA;AAAK,iBAAA,SAAS,CAAC,EAAV,KAAA,EAAA;AAAmB,SADb,CAAjB;;;;AAGN,aAAK,WAAL,CAAiB,MAAjB,CAAwB,cAAxB,EAAwC,CAAxC;;;;;;;;;AACD,GALK;;AA3BR;AAAA;AAiCA,SAAA,6BAAA;AAAC,CAjCD,EAAA,CAAA;;;;AAmCS,OAAA,CAAA,6BAAA,GAAA,6BAAA","sourcesContent":["import { ICreateUserTokenDTO } from \"@modules/accounts/dtos/ICreateUserTokenDTO\";\nimport { UsersTokens } from \"@modules/accounts/infra/typeorm/entities/UserTokens\";\n\nimport { IUsersTokensRepository } from \"../IUsersTokensRepository\";\n\nclass UsersTokensRepositoryInMemory implements IUsersTokensRepository {\n  private usersTokens: UsersTokens[] = [];\n\n  async create(data: ICreateUserTokenDTO): Promise<UsersTokens> {\n    const userToken = new UsersTokens();\n    Object.assign(userToken, data);\n    this.usersTokens.push(userToken);\n    return userToken;\n  }\n\n  async findByUserIdAndRefreshToken(\n    user_id: string,\n    refresh_token: string\n  ): Promise<UsersTokens> {\n    return this.usersTokens.find(\n      (userToken) =>\n        userToken.user_id === user_id &&\n        userToken.refresh_token === refresh_token\n    );\n  }\n\n  async findByRefreshToken(token: string): Promise<UsersTokens> {\n    return this.usersTokens.find(\n      (userToken) => userToken.refresh_token === token\n    );\n  }\n\n  async deleteById(id: string): Promise<void> {\n    const userTokenIndex = this.usersTokens.findIndex(\n      (userToken) => userToken.id === id\n    );\n    this.usersTokens.splice(userTokenIndex, 1);\n  }\n}\n\nexport { UsersTokensRepositoryInMemory };\n"]}