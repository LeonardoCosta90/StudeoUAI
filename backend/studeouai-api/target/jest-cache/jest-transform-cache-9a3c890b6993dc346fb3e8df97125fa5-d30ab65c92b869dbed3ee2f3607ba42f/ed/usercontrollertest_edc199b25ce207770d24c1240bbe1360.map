{"file":"/home/leo/Documentos/projetos/mine/TCC/StudeoUAI/backend/studeouai-api/src/modules/accounts/controllers/user-controller.test.ts","mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAOA,IAAI,CAAC,IAAI,CAAC,0BAA0B,CAAC,CAAC;AANtC,4BAA0B;AAC1B,sEAA+C;AAC/C,8CAA4D;AAC5D,gDAA0B;AAC1B,yDAAuD;AAIvD,IAAM,eAAe,GAAG,0BAAmD,CAAC;AAE5E,QAAQ,CAAC,sBAAsB,EAAE;IAC/B,UAAU,CAAC;QACT,eAAe,CAAC,SAAS,CAAC,UAAU,CAAC,WAAW,EAAE,CAAC;QACnD,eAAe,CAAC,SAAS,CAAC,YAAY,CAAC,WAAW,EAAE,CAAC;IACvD,CAAC,CAAC,CAAC;IAEH,IAAI,CAAC,sDAAsD,EAAE;;;;;oBACrD,MAAM,GAAG,eAAK,CAAC,QAAQ,CAAC,IAAI,EAAE,CAAC;oBAC/B,oBAAoB,GAAS;wBACjC,EAAE,EAAE,MAAM;wBACV,IAAI,EAAE,eAAK,CAAC,QAAQ,CAAC,MAAM,EAAE;wBAC7B,QAAQ,EAAE,eAAK,CAAC,QAAQ,CAAC,MAAM,EAAE;wBACjC,KAAK,EAAE,eAAK,CAAC,QAAQ,CAAC,KAAK,EAAE;wBAC7B,OAAO,EAAE,KAAK;wBACd,MAAM,EAAE,eAAK,CAAC,QAAQ,CAAC,MAAM,EAAE;wBAC/B,UAAU,EAAE,eAAK,CAAC,QAAQ,CAAC,MAAM,EAAE;wBACnC,UAAU,EAAE,IAAI,IAAI,EAAE;qBACvB,CAAC;oBAEI,WAAW,GAAG,IAAA,oBAAU,EAAC,EAAE,MAAM,EAAE,EAAE,EAAE,EAAE,MAAM,EAAE,EAAE,CAAC,CAAC;oBACrD,KAAgB,IAAA,oBAAU,GAAE,EAA1B,GAAG,SAAA,EAAE,IAAI,UAAA,CAAkB;oBAEnC,eAAe,CAAC,SAAS,CAAC,YAAY,CAAC,iBAAiB,CACtD,oBAAoB,CACrB,CAAC;oBAEF,qBAAM,yBAAc,CAAC,YAAY,CAAC,WAAW,EAAE,GAAG,EAAE,IAAI,CAAC,EAAA;;oBAAzD,SAAyD,CAAC;oBAE1D,MAAM,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC,cAAc,CAAC,GAAG,CAAC,CAAC;;;;SACxC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","names":[],"sources":["/home/leo/Documentos/projetos/mine/TCC/StudeoUAI/backend/studeouai-api/src/modules/accounts/controllers/user-controller.test.ts"],"sourcesContent":["import { User } from '@modules/accounts/typeorm/entities/user';\nimport 'reflect-metadata';\nimport UserController from './user-controller';\nimport { getMockReq, getMockRes } from '@jest-mock/express';\nimport faker from 'faker';\nimport { UserService } from '../services/user-service';\n\njest.mock('../services/user-service');\n\nconst UserServiceMock = UserService as jest.MockedClass<typeof UserService>;\n\ndescribe('Test user controller', () => {\n  beforeEach(() => {\n    UserServiceMock.prototype.createUser.mockRestore();\n    UserServiceMock.prototype.findUserById.mockRestore();\n  });\n\n  test('Should response 201 when call execute() with success', async () => {\n    const idMock = faker.datatype.uuid();\n    const createUserReturnMock: User = {\n      id: idMock,\n      name: faker.datatype.string(),\n      password: faker.datatype.string(),\n      email: faker.internet.email(),\n      isAdmin: false,\n      avatar: faker.datatype.string(),\n      avatar_url: faker.datatype.string(),\n      created_at: new Date(),\n    };\n\n    const mockRequest = getMockReq({ params: { id: idMock } });\n    const { res, next } = getMockRes();\n\n    UserServiceMock.prototype.findUserById.mockResolvedValue(\n      createUserReturnMock,\n    );\n\n    await UserController.findUserById(mockRequest, res, next);\n\n    expect(res.status).toBeCalledWith(200);\n  });\n});\n"],"version":3}