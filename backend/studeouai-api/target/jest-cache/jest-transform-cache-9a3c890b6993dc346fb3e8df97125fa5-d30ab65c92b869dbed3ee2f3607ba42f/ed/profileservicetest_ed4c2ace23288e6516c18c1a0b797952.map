{"file":"/home/leo/Documentos/projetos/mine/TCC/StudeoUAI/backend/studeouai-api/src/modules/accounts/services/profile-service.test.ts","mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,gEAAiE;AAEjE,qDAAmD;AAEnD,gDAA0B;AAI1B,QAAQ,CAAC,kCAAkC,EAAE;IAC3C,UAAU,CAAC;QACT,6BAAc,CAAC,IAAI,CAAC,WAAW,EAAE,CAAC;QAClC,6BAAc,CAAC,OAAO,CAAC,WAAW,EAAE,CAAC;QACrC,6BAAc,CAAC,IAAI,CAAC,WAAW,EAAE,CAAC;QAClC,6BAAc,CAAC,MAAM,CAAC,WAAW,EAAE,CAAC;IACtC,CAAC,CAAC,CAAC;IAEH,IAAI,CAAC,sCAAsC,EAAE;;;;;oBACrC,aAAa,GAAG,eAAK,CAAC,QAAQ,CAAC,IAAI,EAAE,CAAC;oBAEtC,iBAAiB,GAAoB;wBACzC,EAAE,EAAE,aAAa;wBACjB,IAAI,EAAE,eAAK,CAAC,QAAQ,CAAC,MAAM,EAAE;wBAC7B,KAAK,EAAE,eAAK,CAAC,QAAQ,CAAC,KAAK,EAAE;wBAC7B,MAAM,EAAE,eAAK,CAAC,QAAQ,CAAC,MAAM,EAAE;wBAC/B,UAAU,EAAE,eAAK,CAAC,QAAQ,CAAC,MAAM,EAAE;qBACpC,CAAC;oBAEF,6BAAc,CAAC,OAAO,CAAC,iBAAiB,CAAC,iBAAiB,CAAC,CAAC;oBAEtD,cAAc,GAAG,IAAI,gCAAc,EAAE,CAAC;oBAC3B,qBAAM,cAAc,CAAC,eAAe,CAAC,aAAa,CAAC,EAAA;;oBAA9D,QAAQ,GAAG,SAAmD;oBAEpE,OAAO,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC;oBAEtB,MAAM,CAAC,QAAQ,CAAC,CAAC,IAAI,CAAC,iBAAiB,CAAC,CAAC;oBACzC,MAAM,CAAC,QAAQ,CAAC,CAAC,UAAU,EAAE,CAAC;;;;SAC/B,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","names":[],"sources":["/home/leo/Documentos/projetos/mine/TCC/StudeoUAI/backend/studeouai-api/src/modules/accounts/services/profile-service.test.ts"],"sourcesContent":["import { repositoryMock } from '@modules/test/mock/typeorm.mock';\nimport { UserResponse } from '../models/user-response';\nimport { ProfileService } from './profile-service';\n\nimport faker from 'faker';\nimport { AppError } from '@shared/errors/appError';\nimport { ProfileResponse } from '../models/profile-response';\n\ndescribe('Test Pending Transaction Service', () => {\n  beforeEach(() => {\n    repositoryMock.find.mockRestore();\n    repositoryMock.findOne.mockRestore();\n    repositoryMock.save.mockRestore();\n    repositoryMock.update.mockRestore();\n  });\n\n  test('Should return a profile with success', async () => {\n    const profileIdMock = faker.datatype.uuid();\n\n    const profileReturnMock: ProfileResponse = {\n      id: profileIdMock,\n      name: faker.datatype.string(),\n      email: faker.internet.email(),\n      avatar: faker.datatype.string(),\n      avatar_url: faker.datatype.string(),\n    };\n\n    repositoryMock.findOne.mockResolvedValue(profileReturnMock);\n\n    const profileService = new ProfileService();\n    const response = await profileService.findProfileById(profileIdMock);\n\n    console.log(response);\n\n    expect(response).toBe(profileReturnMock);\n    expect(response).toBeTruthy();\n  });\n});\n"],"version":3}