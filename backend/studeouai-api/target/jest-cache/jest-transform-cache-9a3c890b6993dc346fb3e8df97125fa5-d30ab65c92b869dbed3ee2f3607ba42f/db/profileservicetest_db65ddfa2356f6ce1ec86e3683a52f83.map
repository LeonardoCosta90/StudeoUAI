{"file":"/home/leo/Documentos/projetos/mine/TCC/StudeoUAI/backend/studeouai-api/src/modules/accounts/services/profile-service.test.ts","mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,gEAAiE;AACjE,qDAAmD;AAGnD,gDAA0B;AAC1B,oDAAmD;AAEnD,QAAQ,CAAC,sBAAsB,EAAE;IAC/B,UAAU,CAAC;QACT,6BAAc,CAAC,OAAO,CAAC,WAAW,EAAE,CAAC;IACvC,CAAC,CAAC,CAAC;IAEH,IAAI,CAAC,sCAAsC,EAAE;;;;;oBACrC,iBAAiB,GAAoB;wBACzC,MAAM,EAAE,eAAK,CAAC,QAAQ,CAAC,MAAM,EAAE;wBAC/B,UAAU,EAAE,eAAK,CAAC,QAAQ,CAAC,MAAM,EAAE;wBACnC,KAAK,EAAE,eAAK,CAAC,QAAQ,CAAC,KAAK,EAAE;wBAC7B,EAAE,EAAE,eAAK,CAAC,QAAQ,CAAC,IAAI,EAAE;wBACzB,IAAI,EAAE,eAAK,CAAC,QAAQ,CAAC,MAAM,EAAE;qBAC9B,CAAC;oBAEF,6BAAc,CAAC,OAAO,CAAC,iBAAiB,CAAC,iBAAiB,CAAC,CAAC;oBAEtD,cAAc,GAAG,IAAI,gCAAc,EAAE,CAAC;oBAC3B,qBAAM,cAAc,CAAC,eAAe,CAAC,WAAW,CAAC,EAAA;;oBAA5D,QAAQ,GAAG,SAAiD;oBAElE,MAAM,CAAC,QAAQ,CAAC,CAAC,IAAI,CAAC,iBAAiB,CAAC,CAAC;oBACzC,MAAM,CAAC,QAAQ,CAAC,CAAC,UAAU,EAAE,CAAC;;;;SAC/B,CAAC,CAAC;IAEH,IAAI,CAAC,gDAAgD,EAAE;;;;;oBACrD,6BAAc,CAAC,OAAO,CAAC,iBAAiB,CACtC,IAAI,mBAAQ,CAAC,mBAAmB,EAAE,GAAG,CAAC,CACvC,CAAC;oBACI,WAAW,GAAG,IAAI,gCAAc,EAAE,CAAC;;;;oBAGvC,qBAAM,WAAW,CAAC,eAAe,CAAC,WAAW,CAAC,EAAA;;oBAA9C,SAA8C,CAAC;;;;oBAE/C,MAAM,CAAC,OAAK,CAAC,OAAO,CAAC,CAAC,OAAO,CAAC,mBAAmB,CAAC,CAAC;;;;;SAEtD,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","names":[],"sources":["/home/leo/Documentos/projetos/mine/TCC/StudeoUAI/backend/studeouai-api/src/modules/accounts/services/profile-service.test.ts"],"sourcesContent":["import { repositoryMock } from '@modules/test/mock/typeorm.mock';\nimport { ProfileService } from './profile-service';\nimport { ProfileResponse } from '../models/profile-response';\n\nimport faker from 'faker';\nimport { AppError } from '@shared/errors/appError';\n\ndescribe('Test Profile Service', () => {\n  beforeEach(() => {\n    repositoryMock.findOne.mockRestore();\n  });\n\n  test('Should return a profile with success', async () => {\n    const profileReturnMock: ProfileResponse = {\n      avatar: faker.datatype.string(),\n      avatar_url: faker.datatype.string(),\n      email: faker.internet.email(),\n      id: faker.datatype.uuid(),\n      name: faker.datatype.string(),\n    };\n\n    repositoryMock.findOne.mockResolvedValue(profileReturnMock);\n\n    const profileService = new ProfileService();\n    const response = await profileService.findProfileById('Any_Value');\n\n    expect(response).toBe(profileReturnMock);\n    expect(response).toBeTruthy();\n  });\n\n  test('Should return error when call to profile by id', async () => {\n    repositoryMock.findOne.mockRejectedValue(\n      new AppError('Profile not found', 404),\n    );\n    const profileById = new ProfileService();\n\n    try {\n      await profileById.findProfileById('Any_Value');\n    } catch (error) {\n      expect(error.message).toEqual('Profile not found');\n    }\n  });\n});\n"],"version":3}