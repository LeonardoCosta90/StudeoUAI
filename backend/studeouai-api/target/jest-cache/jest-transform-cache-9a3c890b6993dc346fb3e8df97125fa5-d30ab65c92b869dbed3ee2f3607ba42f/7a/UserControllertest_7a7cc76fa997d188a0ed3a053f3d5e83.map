{"file":"/home/leo/Documentos/projetos/mine/TCC/StudeoUAI/backend/studeouai-api/src/modules/accounts/controllers/UserController.test.ts","mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AASA,IAAI,CAAC,IAAI,CAAC,yBAAyB,CAAC,CAAC;AAPrC,4BAA0B;AAC1B,oEAA8C;AAC9C,8CAA4D;AAC5D,gDAA0B;AAC1B,wEAAkD;AAKlD,IAAM,eAAe,GAAG,qBAAmD,CAAC;AAE5E,QAAQ,CAAC,sBAAsB,EAAE;IAC/B,UAAU,CAAC;QACT,eAAe,CAAC,SAAS,CAAC,UAAU,CAAC,WAAW,EAAE,CAAC;QACnD,eAAe,CAAC,SAAS,CAAC,YAAY,CAAC,WAAW,EAAE,CAAC;IACvD,CAAC,CAAC,CAAC;IAEH,IAAI,CAAC,sDAAsD,EAAE;;;;;oBACrD,oBAAoB,GAAS;wBACjC,EAAE,EAAE,eAAK,CAAC,QAAQ,CAAC,IAAI,EAAE;wBACzB,IAAI,EAAE,eAAK,CAAC,QAAQ,CAAC,MAAM,EAAE;wBAC7B,QAAQ,EAAE,eAAK,CAAC,QAAQ,CAAC,MAAM,EAAE;wBACjC,KAAK,EAAE,eAAK,CAAC,QAAQ,CAAC,KAAK,EAAE;wBAC7B,OAAO,EAAE,KAAK;wBACd,MAAM,EAAE,eAAK,CAAC,QAAQ,CAAC,MAAM,EAAE;wBAC/B,UAAU,EAAE,eAAK,CAAC,QAAQ,CAAC,MAAM,EAAE;wBACnC,UAAU,EAAE,IAAI,IAAI,EAAE;qBACvB,CAAC;oBAEI,cAAc,GAAsB;wBACxC,IAAI,EAAE,eAAK,CAAC,QAAQ,CAAC,IAAI,EAAE;wBAC3B,QAAQ,EAAE,eAAK,CAAC,QAAQ,CAAC,IAAI,EAAE;wBAC/B,KAAK,EAAE,eAAK,CAAC,QAAQ,CAAC,KAAK,EAAE;wBAC7B,OAAO,EAAE,KAAK;wBACd,MAAM,EAAE,eAAK,CAAC,QAAQ,CAAC,MAAM,EAAE;qBAChC,CAAC;oBAEI,GAAG,GAAG,IAAA,oBAAU,EAAC;wBACrB,IAAI,EAAE,EAAE,cAAc,gBAAA,EAAE;qBACzB,CAAC,CAAC;oBAEG,KAAgB,IAAA,oBAAU,GAAE,EAA1B,GAAG,SAAA,EAAE,IAAI,UAAA,CAAkB;oBAEnC,eAAe,CAAC,SAAS,CAAC,UAAU,CAAC,iBAAiB,CACpD,oBAAoB,CACrB,CAAC;oBACe,qBAAM,wBAAc,CAAC,UAAU,CAAC,GAAG,EAAE,GAAG,EAAE,IAAI,CAAC,EAAA;;oBAA1D,QAAQ,GAAG,SAA+C;oBAEhE,MAAM,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC,cAAc,CAAC,GAAG,CAAC,CAAC;oBAC5C,MAAM,CAAC,QAAQ,CAAC,CAAC,OAAO,CAAC,oBAAoB,CAAC,CAAC;;;;SAChD,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","names":[],"sources":["/home/leo/Documentos/projetos/mine/TCC/StudeoUAI/backend/studeouai-api/src/modules/accounts/controllers/UserController.test.ts"],"sourcesContent":["import { User } from '@modules/accounts/infra/typeorm/entities/User';\nimport { AppError } from '@shared/errors/appError';\nimport 'reflect-metadata';\nimport UserController from './UserController';\nimport { getMockReq, getMockRes } from '@jest-mock/express';\nimport faker from 'faker';\nimport UserService from '../services/UserService';\nimport CreateUserRequest from '../models/CreateUserRequest';\n\njest.mock('../services/UserService');\n\nconst UserServiceMock = UserService as jest.MockedClass<typeof UserService>;\n\ndescribe('Test user controller', () => {\n  beforeEach(() => {\n    UserServiceMock.prototype.createUser.mockRestore();\n    UserServiceMock.prototype.findUserById.mockRestore();\n  });\n\n  test('Should response 201 when call execute() with success', async () => {\n    const createUserReturnMock: User = {\n      id: faker.datatype.uuid(),\n      name: faker.datatype.string(),\n      password: faker.datatype.string(),\n      email: faker.internet.email(),\n      isAdmin: false,\n      avatar: faker.datatype.string(),\n      avatar_url: faker.datatype.string(),\n      created_at: new Date(),\n    };\n\n    const createUserMock: CreateUserRequest = {\n      name: faker.datatype.uuid(),\n      password: faker.datatype.uuid(),\n      email: faker.internet.email(),\n      isAdmin: false,\n      avatar: faker.datatype.string(),\n    };\n\n    const req = getMockReq({\n      body: { createUserMock },\n    });\n\n    const { res, next } = getMockRes();\n\n    UserServiceMock.prototype.createUser.mockResolvedValue(\n      createUserReturnMock,\n    );\n    const response = await UserController.createUser(req, res, next);\n\n    expect(response.status).toBeCalledWith(201);\n    expect(response).toEqual(createUserReturnMock);\n  });\n});\n"],"version":3}