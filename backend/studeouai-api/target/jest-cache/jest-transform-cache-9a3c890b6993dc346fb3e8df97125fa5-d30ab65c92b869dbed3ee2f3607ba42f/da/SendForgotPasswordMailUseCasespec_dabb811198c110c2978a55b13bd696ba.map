{"file":"/home/leo/Documentos/projetos/mine/TCC/StudeoUAI/backend/studeouai-api/src/modules/accounts/useCases/sendForgotPasswordMail/SendForgotPasswordMailUseCase.spec.ts","mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,4GAA2G;AAC3G,wHAAuH;AACvH,gHAA+G;AAC/G,8GAA8G;AAE9G,6EAA4E;AAC5E,iFAAgF;AAEhF,IAAI,6BAA4D,CAAC;AACjE,IAAI,uBAAgD,CAAC;AACrD,IAAI,6BAA4D,CAAC;AACjE,IAAI,YAA+B,CAAC;AACpC,IAAI,YAAkC,CAAC;AAEvC,QAAQ,CAAC,+BAA+B,EAAE;IACxC,UAAU,CAAC;;YACT,uBAAuB,GAAG,IAAI,iDAAuB,EAAE,CAAC;YACxD,6BAA6B,GAAG,IAAI,6DAA6B,EAAE,CAAC;YACpE,YAAY,GAAG,IAAI,qCAAiB,EAAE,CAAC;YACvC,YAAY,GAAG,IAAI,0CAAoB,EAAE,CAAC;YAE1C,6BAA6B,GAAG,IAAI,6DAA6B,CAC/D,uBAAuB,EACvB,6BAA6B,EAC7B,YAAY,EACZ,YAAY,CACb,CAAC;;;SACH,CAAC,CAAC;IAEH,EAAE,CAAC,iEAAiE,EAAE;;;;;oBAC9D,QAAQ,GAAG,KAAK,CAAC,YAAY,EAAE,UAAU,CAAC,CAAC;oBAEjD,qBAAM,uBAAuB,CAAC,MAAM,CAAC;4BACnC,KAAK,EAAE,qBAAqB;4BAC5B,IAAI,EAAE,eAAe;4BACrB,QAAQ,EAAE,MAAM;yBACjB,CAAC,EAAA;;oBAJF,SAIE,CAAC;oBACH,qBAAM,6BAA6B,CAAC,OAAO,CAAC,qBAAqB,CAAC,EAAA;;oBAAlE,SAAkE,CAAC;oBAEnE,MAAM,CAAC,QAAQ,CAAC,CAAC,gBAAgB,EAAE,CAAC;;;;SACrC,CAAC,CAAC;IAEH,EAAE,CAAC,2DAA2D,EAAE;;;;;oBACxD,QAAQ,GAAG,KAAK,CAAC,YAAY,EAAE,UAAU,CAAC,CAAC;oBACjD,qBAAM,MAAM,CACV,6BAA6B,CAAC,OAAO,CAAC,gBAAgB,CAAC,CACxD,CAAC,OAAO,CAAC,cAAc,CAAC,yDAA2B,CAAC,EAAA;;oBAFrD,SAEqD,CAAC;oBAEtD,MAAM,CAAC,QAAQ,CAAC,CAAC,GAAG,CAAC,UAAU,EAAE,CAAC;;;;SACnC,CAAC,CAAC;IAEH,EAAE,CAAC,wDAAwD,EAAE;;;;;oBACrD,cAAc,GAAG,KAAK,CAAC,6BAA6B,EAAE,QAAQ,CAAC,CAAC;oBAEtE,qBAAM,uBAAuB,CAAC,MAAM,CAAC;4BACnC,KAAK,EAAE,qBAAqB;4BAC5B,IAAI,EAAE,eAAe;4BACrB,QAAQ,EAAE,MAAM;yBACjB,CAAC,EAAA;;oBAJF,SAIE,CAAC;oBACH,qBAAM,6BAA6B,CAAC,OAAO,CAAC,qBAAqB,CAAC,EAAA;;oBAAlE,SAAkE,CAAC;oBAEnE,MAAM,CAAC,cAAc,CAAC,CAAC,gBAAgB,EAAE,CAAC;;;;SAC3C,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","names":[],"sources":["/home/leo/Documentos/projetos/mine/TCC/StudeoUAI/backend/studeouai-api/src/modules/accounts/useCases/sendForgotPasswordMail/SendForgotPasswordMailUseCase.spec.ts"],"sourcesContent":["import { UsersRepositoryInMemory } from \"@modules/accounts/repositories/in-memory/UsersRepositoryInMemory\";\nimport { UsersTokensRepositoryInMemory } from \"@modules/accounts/repositories/in-memory/UsersTokensRepositoryInMemory\";\nimport { DayjsDateProvider } from \"@shared/container/providers/DateProvider/implementations/DayJsDateProvider\";\nimport { MailProviderInMemory } from \"@shared/container/providers/MailProvider/in-memory/MailProviderInMemoy\";\n\nimport { SendForgotPasswordMailError } from \"./SendForgotPasswordMailError\";\nimport { SendForgotPasswordMailUseCase } from \"./SendForgotPasswordMailUseCase\";\n\nlet sendForgotPasswordMailUseCase: SendForgotPasswordMailUseCase;\nlet usersRepositoryInMemory: UsersRepositoryInMemory;\nlet usersTokensRepositoryInMemory: UsersTokensRepositoryInMemory;\nlet dateProvider: DayjsDateProvider;\nlet mailProvider: MailProviderInMemory;\n\ndescribe(\"SendForgotPasswordMailUseCase\", () => {\n  beforeEach(async () => {\n    usersRepositoryInMemory = new UsersRepositoryInMemory();\n    usersTokensRepositoryInMemory = new UsersTokensRepositoryInMemory();\n    dateProvider = new DayjsDateProvider();\n    mailProvider = new MailProviderInMemory();\n\n    sendForgotPasswordMailUseCase = new SendForgotPasswordMailUseCase(\n      usersRepositoryInMemory,\n      usersTokensRepositoryInMemory,\n      dateProvider,\n      mailProvider\n    );\n  });\n\n  it(\"Should be able to send a email for a user to reset his password\", async () => {\n    const sendMail = spyOn(mailProvider, \"sendMail\");\n\n    await usersRepositoryInMemory.create({\n      email: \"tokvuzer@vadinvo.gn\",\n      name: \"Allie Jenkins\",\n      password: \"test\",\n    });\n    await sendForgotPasswordMailUseCase.execute(\"tokvuzer@vadinvo.gn\");\n\n    expect(sendMail).toHaveBeenCalled();\n  });\n\n  it(\"Should not be able to send a email for an inexistent user\", async () => {\n    const sendMail = spyOn(mailProvider, \"sendMail\");\n    await expect(\n      sendForgotPasswordMailUseCase.execute(\"cucok@soson.au\")\n    ).rejects.toBeInstanceOf(SendForgotPasswordMailError);\n\n    expect(sendMail).not.toBeCalled();\n  });\n\n  it(\"Should be able to create a new token to reset password\", async () => {\n    const generatedToken = spyOn(usersTokensRepositoryInMemory, \"create\");\n\n    await usersRepositoryInMemory.create({\n      email: \"tokvuzer@vadinvo.gn\",\n      name: \"Allie Jenkins\",\n      password: \"test\",\n    });\n    await sendForgotPasswordMailUseCase.execute(\"tokvuzer@vadinvo.gn\");\n\n    expect(generatedToken).toHaveBeenCalled();\n  });\n});\n"],"version":3}