[["/home/leo/Documentos/projetos/mine/TCC/StudeoUAI/backend/studeouai-api/src/modules/accounts/useCases/createUser/createUserController.test.ts",{"fileContent":"import { AppError } from '@shared/errors/appError';\nimport 'reflect-metadata';\nimport { CreateUserController } from './createUserController';\nimport { getMockReq, getMockRes } from '@jest-mock/express';\nimport faker from 'faker';\n\nimport { ICreateUserDTO } from '@modules/accounts/dtos/ICreateUserDTO';\nimport { CreateUserUseCase } from './createUserUseCase';\n\njest.mock('./createUserUseCase.ts');\n\nconst CreateUserUseCaseMock = CreateUserUseCase as jest.MockedClass<\n  typeof CreateUserUseCase\n>;\n\ndescribe('Test Create User Use Case', () => {\n  beforeEach(() => {\n    CreateUserUseCaseMock.prototype.execute.mockRestore();\n  });\n\n  test('Should response 201 when call execute() with success', async () => {\n    const createUserMock: ICreateUserDTO = {\n      name: faker.datatype.string(),\n      password: faker.datatype.string(),\n      email: faker.datatype.email,\n    };\n\n    const req = getMockReq({\n      body: { createUserMock },\n    });\n\n    const { res } = getMockRes();\n\n    CreateUserUseCaseMock.prototype.execute.mockResolvedValue();\n    await CreateUserController.prototype.handle(req, res);\n\n    expect(res.status).toBeCalledWith(201);\n  });\n\n  test('Should an error when call create a user existent', async () => {\n    const createUserMock: ICreateUserDTO = {\n      name: faker.datatype.string(),\n      password: faker.datatype.string(),\n      email: faker.datatype.email,\n    };\n\n    const req = getMockReq({\n      body: { createUserMock },\n    });\n\n    const { res } = getMockRes();\n\n    CreateUserUseCaseMock.prototype.execute.mockResolvedValue();\n    await CreateUserController.prototype.handle(req, res);\n\n    try {\n      await CreateUserController.prototype.handle(req, res);\n    } catch (err) {\n      expect(err).toBeInstanceOf(AppError);\n      expect(err.message).toEqual('User already exists');\n    }\n  });\n});\n","resolvedModuleNames":["/home/leo/Documentos/projetos/mine/TCC/StudeoUAI/backend/studeouai-api/src/shared/errors/appError.ts","/home/leo/Documentos/projetos/mine/TCC/StudeoUAI/backend/studeouai-api/src/modules/accounts/useCases/createUser/createUserController.ts","/home/leo/Documentos/projetos/mine/TCC/StudeoUAI/backend/studeouai-api/src/modules/accounts/dtos/ICreateUserDTO.ts","/home/leo/Documentos/projetos/mine/TCC/StudeoUAI/backend/studeouai-api/src/modules/accounts/useCases/createUser/createUserUseCase.ts","/home/leo/Documentos/projetos/mine/TCC/StudeoUAI/backend/studeouai-api/src/modules/accounts/repositories/IUsersRepository.ts","/home/leo/Documentos/projetos/mine/TCC/StudeoUAI/backend/studeouai-api/src/modules/accounts/useCases/createUser/createUserError.ts"]}],["/home/leo/Documentos/projetos/mine/TCC/StudeoUAI/backend/studeouai-api/src/modules/accounts/services/CreateUserService.test.ts",{"fileContent":"import { repositoryMock } from '@modules/test/mock/typeorm.mock';\nimport CreateUserRequest from '../models/CreateUserRequest';\nimport CreateUserResponse from '../models/CreateUserResponse';\nimport CreateUserService from './CreateUserService';\n\nimport faker from 'faker';\nimport { AppError } from '@shared/errors/appError';\n\ndescribe('Test Pending Transaction Service', () => {\n  beforeEach(() => {\n    repositoryMock.find.mockRestore();\n    repositoryMock.findOne.mockRestore();\n    repositoryMock.save.mockRestore();\n    repositoryMock.update.mockRestore();\n  });\n\n  test('Should return response object when call to create with success', async () => {\n    const createUserReturnMock: CreateUserResponse = {\n      id: faker.datatype.uuid(),\n      name: faker.datatype.string(),\n      password: faker.datatype.string(),\n      email: faker.internet.email(),\n      isAdmin: false,\n      avatar: faker.datatype.string(),\n      avatar_url: faker.datatype.string(),\n    };\n\n    const createUserMock: CreateUserRequest = {\n      name: faker.datatype.uuid(),\n      password: faker.datatype.uuid(),\n      email: faker.internet.email(),\n      isAdmin: false,\n      avatar: faker.datatype.string(),\n    };\n\n    repositoryMock.create.mockResolvedValue(createUserReturnMock);\n\n    const createUserService = new CreateUserService();\n    const response = await createUserService.execute(createUserMock);\n\n    expect(response).toBe(createUserReturnMock);\n    expect(response).toBeTruthy();\n  });\n\n  test('Should error when try create a exists user', async () => {\n    const createUserReturnMock: CreateUserResponse = {\n      id: faker.datatype.uuid(),\n      name: faker.datatype.string(),\n      password: faker.datatype.string(),\n      email: faker.internet.email(),\n      isAdmin: false,\n      avatar: faker.datatype.string(),\n      avatar_url: faker.datatype.string(),\n    };\n\n    const createUserMock: CreateUserRequest = {\n      name: faker.datatype.uuid(),\n      password: faker.datatype.uuid(),\n      email: faker.internet.email(),\n      isAdmin: false,\n      avatar: faker.datatype.string(),\n    };\n\n    repositoryMock.create.mockResolvedValue(createUserReturnMock);\n\n    const createUserService = new CreateUserService();\n    createUserService.execute(createUserMock);\n    try {\n      createUserService.execute(createUserMock);\n    } catch (err) {\n      console.log(err);\n      expect(err).toBeInstanceOf(AppError);\n      expect(err.message).toEqual('User already exists');\n    }\n  });\n});\n","resolvedModuleNames":["/home/leo/Documentos/projetos/mine/TCC/StudeoUAI/backend/studeouai-api/src/modules/test/mock/typeorm.mock.ts","/home/leo/Documentos/projetos/mine/TCC/StudeoUAI/backend/studeouai-api/src/modules/accounts/models/CreateUserRequest.ts","/home/leo/Documentos/projetos/mine/TCC/StudeoUAI/backend/studeouai-api/src/modules/accounts/models/CreateUserResponse.ts","/home/leo/Documentos/projetos/mine/TCC/StudeoUAI/backend/studeouai-api/src/modules/accounts/services/CreateUserService.ts","/home/leo/Documentos/projetos/mine/TCC/StudeoUAI/backend/studeouai-api/src/shared/errors/appError.ts","/home/leo/Documentos/projetos/mine/TCC/StudeoUAI/backend/studeouai-api/src/modules/accounts/typeorm/entities/User.ts","/home/leo/Documentos/projetos/mine/TCC/StudeoUAI/backend/studeouai-api/src/modules/accounts/typeorm/repositories/UsersRepository.ts"]}],["/home/leo/Documentos/projetos/mine/TCC/StudeoUAI/backend/studeouai-api/src/modules/test/mock/typeorm.mock.ts",{"fileContent":"/* eslint-disable @typescript-eslint/no-empty-function */\nimport { mock, MockProxy } from 'jest-mock-extended';\nimport { Connection, Repository, SelectQueryBuilder } from 'typeorm';\n\nexport const repositoryMock = mock<Repository<any>>();\nexport const connectionMock: MockProxy<Connection> = mock<Connection>();\nexport const selectQueryBuilderMock = mock<SelectQueryBuilder<any>>();\n\njest.mock('typeorm', () => {\n  return {\n    getCustomRepository: () => repositoryMock,\n    getRepository: () => repositoryMock,\n    getConnection: () => connectionMock,\n\n    Entity: () => () => {},\n    PrimaryColumn: () => () => {},\n    PrimaryGeneratedColumn: () => () => {},\n    Column: () => () => {},\n    CreateDateColumn: () => () => {},\n    UpdateDateColumn: () => () => {},\n    Unique: () => () => {},\n    JoinColumn: () => () => {},\n    JoinTable: () => () => {},\n    OneToOne: () => () => {},\n    OneToMany: () => () => {},\n    ManyToOne: () => () => {},\n    Repository: jest.fn(),\n    EntityRepository: () => () => {},\n  };\n});\n","resolvedModuleNames":[]}],["/home/leo/Documentos/projetos/mine/TCC/StudeoUAI/backend/studeouai-api/src/modules/accounts/services/CreateUserService.ts",{"fileContent":"import { AppError } from '@shared/errors/appError';\nimport { hash } from 'bcryptjs';\nimport { getCustomRepository } from 'typeorm';\nimport CreateUserRequest from '../models/CreateUserRequest';\nimport { User } from '../typeorm/entities/User';\nimport { UsersRepository } from '../typeorm/repositories/UsersRepository';\n\nclass CreateUserService {\n  public async execute({\n    name,\n    password,\n    email,\n    isAdmin,\n    avatar,\n  }: CreateUserRequest): Promise<User> {\n    const usersRepository = getCustomRepository(UsersRepository);\n    const emailExists = await usersRepository.findByEmail(email);\n\n    if (emailExists) {\n      throw new AppError('Email address already used.');\n    }\n\n    const passwordHash = await hash(\n      password,\n      Number(process.env.DEFAULT_HASH_SAULT),\n    );\n\n    const user = await usersRepository.create({\n      name,\n      password: passwordHash,\n      email,\n      isAdmin: false,\n      avatar: null,\n    });\n\n    await usersRepository.save(user);\n\n    return user;\n  }\n}\n\nexport default CreateUserService;\n","resolvedModuleNames":["/home/leo/Documentos/projetos/mine/TCC/StudeoUAI/backend/studeouai-api/src/shared/errors/appError.ts","/home/leo/Documentos/projetos/mine/TCC/StudeoUAI/backend/studeouai-api/src/modules/accounts/models/CreateUserRequest.ts","/home/leo/Documentos/projetos/mine/TCC/StudeoUAI/backend/studeouai-api/src/modules/accounts/typeorm/entities/User.ts","/home/leo/Documentos/projetos/mine/TCC/StudeoUAI/backend/studeouai-api/src/modules/accounts/typeorm/repositories/UsersRepository.ts"]}],["/home/leo/Documentos/projetos/mine/TCC/StudeoUAI/backend/studeouai-api/src/shared/errors/appError.ts",{"fileContent":"export class AppError {\n  public readonly message: string;\n  public readonly statusCode: number;\n\n  constructor(message: string, statusCode = 400) {\n    this.message = message;\n    this.statusCode = statusCode;\n  }\n}\n","resolvedModuleNames":[]}],["/home/leo/Documentos/projetos/mine/TCC/StudeoUAI/backend/studeouai-api/src/modules/accounts/typeorm/repositories/UsersRepository.ts",{"fileContent":"import { EntityRepository, Repository } from 'typeorm';\nimport { User } from '../entities/User';\n\n@EntityRepository(User)\nclass UsersRepository extends Repository<User> {\n  public async findByName(name: string): Promise<User | undefined> {\n    const user = await this.findOne({\n      where: {\n        name,\n      },\n    });\n\n    return user;\n  }\n\n  public async findById(id: string): Promise<User | undefined> {\n    const user = await this.findOne({\n      where: {\n        id,\n      },\n    });\n\n    return user;\n  }\n\n  public async findByEmail(email: string): Promise<User | undefined> {\n    const user = await this.findOne({\n      where: {\n        email,\n      },\n    });\n\n    return user;\n  }\n}\n\nexport { UsersRepository };\n","resolvedModuleNames":["/home/leo/Documentos/projetos/mine/TCC/StudeoUAI/backend/studeouai-api/src/modules/accounts/typeorm/entities/User.ts"]}],["/home/leo/Documentos/projetos/mine/TCC/StudeoUAI/backend/studeouai-api/src/modules/accounts/typeorm/entities/User.ts",{"fileContent":"import { Expose } from 'class-transformer';\nimport { Column, CreateDateColumn, Entity, PrimaryColumn } from 'typeorm';\nimport { v4 as uuidV4 } from 'uuid';\n\n@Entity('userss')\nclass User {\n  @PrimaryColumn()\n  id: string;\n\n  @Column()\n  name: string;\n\n  @Column()\n  password: string;\n\n  @Column()\n  email: string;\n\n  @Column()\n  isAdmin: boolean;\n\n  @Column({ nullable: true })\n  avatar: string;\n\n  @CreateDateColumn({ select: false })\n  created_at: Date;\n\n  @Expose({ name: 'avatar_url' })\n  avatar_url(): string {\n    switch (process.env.STORAGE_TYPE) {\n      case 'local':\n        return `${process.env.APP_API_URL}/avatar/${this.avatar}`;\n      case 's3':\n        return `${process.env.AWS_BUCKET_URL}/avatar/${this.avatar}`;\n      default:\n        return null;\n    }\n  }\n\n  constructor() {\n    if (!this.id) {\n      this.id = uuidV4();\n    }\n  }\n}\n\nexport { User };\n","resolvedModuleNames":[]}],["/home/leo/Documentos/projetos/mine/TCC/StudeoUAI/backend/studeouai-api/src/modules/class/useCases/createClassSpecification/CreateClassSpecificationUseCase.spec.ts",{"fileContent":"import { ClassRepositoryInMemory } from \"@modules/class/repositories/in-memory/ClassRepositoryInMemory\";\nimport { SpecificationRepositoryInMemory } from \"@modules/class/repositories/in-memory/SpecificationsRepositoryInMemory\";\nimport { AppError } from \"@shared/errors/appError\";\n\nimport { CreateClassSpecificationUseCase } from \"./CreateClassSpecificationUseCase\";\n\nlet createClassSpecificationUseCase: CreateClassSpecificationUseCase;\nlet classRepositoryInMemory: ClassRepositoryInMemory;\nlet specificationRepositoryInMemory: SpecificationRepositoryInMemory;\n\nconst classMock = {\n  name: \"Class Name\",\n  description: \"Description\",\n  category_id: \"Category\",\n};\n\ndescribe(\"Create Class Specification\", () => {\n  beforeEach(() => {\n    classRepositoryInMemory = new ClassRepositoryInMemory();\n    specificationRepositoryInMemory = new SpecificationRepositoryInMemory();\n    createClassSpecificationUseCase = new CreateClassSpecificationUseCase(\n      classRepositoryInMemory,\n      specificationRepositoryInMemory\n    );\n  });\n\n  it(\"Should be able to add a new specification to a class\", async () => {\n    const specifications_ids = [];\n\n    const _class = await classRepositoryInMemory.create(classMock);\n\n    // eslint-disable-next-line no-plusplus\n    for (let i = 0; i <= 1; i++) {\n      specificationRepositoryInMemory\n        .create({\n          name: `Specification ${i + 1}`,\n          description: `Specification Test ${i + 1}`,\n        })\n        .then((specification) => {\n          specifications_ids.push(specification.id);\n        });\n    }\n\n    const specificationsClass = await createClassSpecificationUseCase.execute({\n      class_id: _class.id,\n      specifications_ids,\n    });\n\n    expect(specificationsClass.specifications).toHaveLength(2);\n  });\n\n  it(\"Should not be able to add a new specification to inexistent class\", async () => {\n    expect(async () => {\n      const class_id = \"123\";\n      const specifications_ids = [\"456\", \"789\"];\n\n      await createClassSpecificationUseCase.execute({\n        class_id,\n        specifications_ids,\n      });\n    }).rejects.toBeInstanceOf(AppError);\n  });\n\n  it(\"Should not be able to add a inexistent specification to a class\", async () => {\n    expect(async () => {\n      const _class = await classRepositoryInMemory.create(classMock);\n      const specifications_ids = [\"456\", \"789\"];\n\n      await createClassSpecificationUseCase.execute({\n        class_id: _class.id,\n        specifications_ids,\n      });\n    }).rejects.toBeInstanceOf(AppError);\n  });\n});\n","resolvedModuleNames":["/home/leo/Documentos/projetos/mine/TCC/StudeoUAI/backend/studeouai-api/src/modules/class/repositories/in-memory/ClassRepositoryInMemory.ts","/home/leo/Documentos/projetos/mine/TCC/StudeoUAI/backend/studeouai-api/src/modules/class/repositories/in-memory/SpecificationsRepositoryInMemory.ts","/home/leo/Documentos/projetos/mine/TCC/StudeoUAI/backend/studeouai-api/src/shared/errors/appError.ts","/home/leo/Documentos/projetos/mine/TCC/StudeoUAI/backend/studeouai-api/src/modules/class/useCases/createClassSpecification/CreateClassSpecificationUseCase.ts","/home/leo/Documentos/projetos/mine/TCC/StudeoUAI/backend/studeouai-api/src/modules/class/dtos/ICreateClassDTO.ts","/home/leo/Documentos/projetos/mine/TCC/StudeoUAI/backend/studeouai-api/src/modules/class/infra/typeorm/entities/Class.ts","/home/leo/Documentos/projetos/mine/TCC/StudeoUAI/backend/studeouai-api/src/modules/class/repositories/IClassRepository.ts","/home/leo/Documentos/projetos/mine/TCC/StudeoUAI/backend/studeouai-api/src/modules/class/infra/typeorm/entities/Specifications.ts","/home/leo/Documentos/projetos/mine/TCC/StudeoUAI/backend/studeouai-api/src/modules/class/repositories/ISpecificationsRepository.ts","/home/leo/Documentos/projetos/mine/TCC/StudeoUAI/backend/studeouai-api/src/modules/class/useCases/createClassSpecification/CreateClassSpecificationError.ts"]}],["/home/leo/Documentos/projetos/mine/TCC/StudeoUAI/backend/studeouai-api/src/modules/class/repositories/in-memory/ClassRepositoryInMemory.ts",{"fileContent":"import { ICreateClassDTO } from \"@modules/class/dtos/ICreateClassDTO\";\nimport { Class } from \"@modules/class/infra/typeorm/entities/Class\";\n\nimport { IClassRepository } from \"../IClassRepository\";\n\nclass ClassRepositoryInMemory implements IClassRepository {\n  class: Class[] = [];\n\n  async create({\n    id,\n    category_id,\n    description,\n    name,\n    specifications,\n  }: ICreateClassDTO): Promise<Class> {\n    const _class = new Class();\n    Object.assign(_class, {\n      id: id || _class.id,\n      category_id,\n\n      description,\n      name,\n      specifications,\n    });\n    this.class.push(_class);\n    return _class;\n  }\n\n  async findById(id: string): Promise<Class> {\n    return this.class.find((_class) => _class.id === id);\n  }\n\n  async findByName(name: string): Promise<Class> {\n    return this.class.find((_class) => _class.name === name);\n  }\n}\n\nexport { ClassRepositoryInMemory };\n","resolvedModuleNames":["/home/leo/Documentos/projetos/mine/TCC/StudeoUAI/backend/studeouai-api/src/modules/class/dtos/ICreateClassDTO.ts","/home/leo/Documentos/projetos/mine/TCC/StudeoUAI/backend/studeouai-api/src/modules/class/infra/typeorm/entities/Class.ts","/home/leo/Documentos/projetos/mine/TCC/StudeoUAI/backend/studeouai-api/src/modules/class/repositories/IClassRepository.ts","/home/leo/Documentos/projetos/mine/TCC/StudeoUAI/backend/studeouai-api/src/modules/class/infra/typeorm/entities/Specifications.ts","/home/leo/Documentos/projetos/mine/TCC/StudeoUAI/backend/studeouai-api/src/modules/class/infra/typeorm/entities/Category.ts"]}],["/home/leo/Documentos/projetos/mine/TCC/StudeoUAI/backend/studeouai-api/src/modules/class/infra/typeorm/entities/Class.ts",{"fileContent":"import {\n  Column,\n  CreateDateColumn,\n  Entity,\n  JoinColumn,\n  JoinTable,\n  ManyToMany,\n  ManyToOne,\n  PrimaryColumn,\n} from \"typeorm\";\nimport { v4 as uuidV4 } from \"uuid\";\n\nimport { Category } from \"./Category\";\nimport { Specification } from \"./Specifications\";\n\n@Entity(\"class\")\nclass Class {\n  @PrimaryColumn()\n  id: string;\n\n  @Column()\n  name: string;\n\n  @Column()\n  description: string;\n\n  @Column()\n  available: boolean;\n\n  @Column()\n  category_id: string;\n\n  @ManyToOne(() => Category)\n  @JoinColumn({\n    name: \"category_id\",\n  })\n  category: Category;\n\n  @ManyToMany(() => Specification)\n  @JoinTable({\n    name: \"specifications_class\",\n    joinColumns: [{ name: \"class_id\" }],\n    inverseJoinColumns: [{ name: \"specification_id\" }],\n  })\n  specifications: Specification[];\n\n  @CreateDateColumn()\n  created_at: Date;\n\n  constructor() {\n    if (!this.id) {\n      this.id = uuidV4();\n      this.available = true;\n    }\n  }\n}\n\nexport { Class };\n","resolvedModuleNames":["/home/leo/Documentos/projetos/mine/TCC/StudeoUAI/backend/studeouai-api/src/modules/class/infra/typeorm/entities/Category.ts","/home/leo/Documentos/projetos/mine/TCC/StudeoUAI/backend/studeouai-api/src/modules/class/infra/typeorm/entities/Specifications.ts"]}],["/home/leo/Documentos/projetos/mine/TCC/StudeoUAI/backend/studeouai-api/src/modules/class/infra/typeorm/entities/Category.ts",{"fileContent":"import { Column, CreateDateColumn, Entity, PrimaryColumn } from \"typeorm\";\nimport { v4 as uuidV4 } from \"uuid\";\n\n@Entity(\"categories\")\nclass Category {\n  @PrimaryColumn()\n  id?: string;\n\n  @Column()\n  name: string;\n\n  @Column()\n  description: string;\n\n  @CreateDateColumn()\n  created_at: Date;\n\n  constructor() {\n    if (!this.id) {\n      this.id = uuidV4();\n    }\n  }\n}\n\nexport { Category };\n","resolvedModuleNames":[]}],["/home/leo/Documentos/projetos/mine/TCC/StudeoUAI/backend/studeouai-api/src/modules/class/infra/typeorm/entities/Specifications.ts",{"fileContent":"import { Column, CreateDateColumn, Entity, PrimaryColumn } from \"typeorm\";\nimport { v4 as uuidV4 } from \"uuid\";\n\n@Entity(\"specifications\")\nclass Specification {\n  @PrimaryColumn()\n  id?: string;\n\n  @Column()\n  name: string;\n\n  @Column()\n  description: string;\n\n  @CreateDateColumn()\n  created_at: Date;\n\n  constructor() {\n    if (!this.id) {\n      this.id = uuidV4();\n    }\n  }\n}\n\nexport { Specification };\n","resolvedModuleNames":[]}],["/home/leo/Documentos/projetos/mine/TCC/StudeoUAI/backend/studeouai-api/src/modules/class/repositories/in-memory/SpecificationsRepositoryInMemory.ts",{"fileContent":"import { Specification } from \"@modules/class/infra/typeorm/entities/Specifications\";\n\nimport {\n  ICreateSpecificationDTO,\n  ISpecificationsRepository,\n} from \"../ISpecificationsRepository\";\n\nclass SpecificationRepositoryInMemory implements ISpecificationsRepository {\n  private specifications: Specification[] = [];\n\n  async create({\n    name,\n    description,\n  }: ICreateSpecificationDTO): Promise<Specification> {\n    const specification = new Specification();\n    Object.assign(specification, {\n      name,\n      description,\n    });\n    this.specifications.push(specification);\n    return specification;\n  }\n\n  async findByName(name: string): Promise<Specification> {\n    return this.specifications.find(\n      (specification) => specification.name === name\n    );\n  }\n\n  async findById(ids: string[]): Promise<Specification[]> {\n    return this.specifications.filter((specification) =>\n      ids.includes(specification.id)\n    );\n  }\n}\n\nexport { SpecificationRepositoryInMemory };\n","resolvedModuleNames":["/home/leo/Documentos/projetos/mine/TCC/StudeoUAI/backend/studeouai-api/src/modules/class/infra/typeorm/entities/Specifications.ts","/home/leo/Documentos/projetos/mine/TCC/StudeoUAI/backend/studeouai-api/src/modules/class/repositories/ISpecificationsRepository.ts"]}],["/home/leo/Documentos/projetos/mine/TCC/StudeoUAI/backend/studeouai-api/src/modules/class/useCases/createClassSpecification/CreateClassSpecificationUseCase.ts",{"fileContent":"import { inject, injectable } from \"tsyringe\";\n\nimport { Class } from \"@modules/class/infra/typeorm/entities/Class\";\nimport { IClassRepository } from \"@modules/class/repositories/IClassRepository\";\nimport { ISpecificationsRepository } from \"@modules/class/repositories/ISpecificationsRepository\";\n\nimport { CreateClassSpecificationError } from \"./CreateClassSpecificationError\";\n\ninterface IRequest {\n  class_id: string;\n  specifications_ids: string[];\n}\n\n@injectable()\nclass CreateClassSpecificationUseCase {\n  constructor(\n    @inject(\"ClassRepository\")\n    private classRepository: IClassRepository,\n    @inject(\"SpecificationsRepository\")\n    private specificationRepository: ISpecificationsRepository\n  ) {}\n\n  async execute({ class_id, specifications_ids }: IRequest): Promise<Class> {\n    const _class = await this.classRepository.findById(class_id);\n    if (!_class) {\n      throw new CreateClassSpecificationError.ClassNotFound();\n    }\n\n    const specifications = await this.specificationRepository.findById(\n      specifications_ids\n    );\n    if (specifications.length === 0) {\n      throw new CreateClassSpecificationError.SpecificationNotFound();\n    }\n\n    _class.specifications = specifications;\n    await this.classRepository.create(_class);\n    return _class;\n  }\n}\n\nexport { CreateClassSpecificationUseCase };\n","resolvedModuleNames":["/home/leo/Documentos/projetos/mine/TCC/StudeoUAI/backend/studeouai-api/src/modules/class/infra/typeorm/entities/Class.ts","/home/leo/Documentos/projetos/mine/TCC/StudeoUAI/backend/studeouai-api/src/modules/class/repositories/IClassRepository.ts","/home/leo/Documentos/projetos/mine/TCC/StudeoUAI/backend/studeouai-api/src/modules/class/repositories/ISpecificationsRepository.ts","/home/leo/Documentos/projetos/mine/TCC/StudeoUAI/backend/studeouai-api/src/modules/class/useCases/createClassSpecification/CreateClassSpecificationError.ts","/home/leo/Documentos/projetos/mine/TCC/StudeoUAI/backend/studeouai-api/src/modules/class/infra/typeorm/entities/Category.ts","/home/leo/Documentos/projetos/mine/TCC/StudeoUAI/backend/studeouai-api/src/modules/class/infra/typeorm/entities/Specifications.ts","/home/leo/Documentos/projetos/mine/TCC/StudeoUAI/backend/studeouai-api/src/modules/class/dtos/ICreateClassDTO.ts","/home/leo/Documentos/projetos/mine/TCC/StudeoUAI/backend/studeouai-api/src/shared/errors/appError.ts"]}],["/home/leo/Documentos/projetos/mine/TCC/StudeoUAI/backend/studeouai-api/src/modules/class/useCases/createClassSpecification/CreateClassSpecificationError.ts",{"fileContent":"/* eslint-disable @typescript-eslint/no-namespace */\n/* eslint-disable max-classes-per-file */\nimport { AppError } from \"@shared/errors/appError\";\n\nexport namespace CreateClassSpecificationError {\n  export class ClassNotFound extends AppError {\n    constructor() {\n      super(\"Class not found\");\n    }\n  }\n\n  export class SpecificationNotFound extends AppError {\n    constructor() {\n      super(\"Specification not found\");\n    }\n  }\n}\n","resolvedModuleNames":["/home/leo/Documentos/projetos/mine/TCC/StudeoUAI/backend/studeouai-api/src/shared/errors/appError.ts"]}],["/home/leo/Documentos/projetos/mine/TCC/StudeoUAI/backend/studeouai-api/src/modules/accounts/useCases/sendForgotPasswordMail/SendForgotPasswordMailUseCase.spec.ts",{"fileContent":"import { UsersRepositoryInMemory } from \"@modules/accounts/repositories/in-memory/UsersRepositoryInMemory\";\nimport { UsersTokensRepositoryInMemory } from \"@modules/accounts/repositories/in-memory/UsersTokensRepositoryInMemory\";\nimport { DayjsDateProvider } from \"@shared/container/providers/DateProvider/implementations/DayJsDateProvider\";\nimport { MailProviderInMemory } from \"@shared/container/providers/MailProvider/in-memory/MailProviderInMemoy\";\n\nimport { SendForgotPasswordMailError } from \"./SendForgotPasswordMailError\";\nimport { SendForgotPasswordMailUseCase } from \"./SendForgotPasswordMailUseCase\";\n\nlet sendForgotPasswordMailUseCase: SendForgotPasswordMailUseCase;\nlet usersRepositoryInMemory: UsersRepositoryInMemory;\nlet usersTokensRepositoryInMemory: UsersTokensRepositoryInMemory;\nlet dateProvider: DayjsDateProvider;\nlet mailProvider: MailProviderInMemory;\n\ndescribe(\"SendForgotPasswordMailUseCase\", () => {\n  beforeEach(async () => {\n    usersRepositoryInMemory = new UsersRepositoryInMemory();\n    usersTokensRepositoryInMemory = new UsersTokensRepositoryInMemory();\n    dateProvider = new DayjsDateProvider();\n    mailProvider = new MailProviderInMemory();\n\n    sendForgotPasswordMailUseCase = new SendForgotPasswordMailUseCase(\n      usersRepositoryInMemory,\n      usersTokensRepositoryInMemory,\n      dateProvider,\n      mailProvider\n    );\n  });\n\n  it(\"Should be able to send a email for a user to reset his password\", async () => {\n    const sendMail = spyOn(mailProvider, \"sendMail\");\n\n    await usersRepositoryInMemory.create({\n      email: \"tokvuzer@vadinvo.gn\",\n      name: \"Allie Jenkins\",\n      password: \"test\",\n    });\n    await sendForgotPasswordMailUseCase.execute(\"tokvuzer@vadinvo.gn\");\n\n    expect(sendMail).toHaveBeenCalled();\n  });\n\n  it(\"Should not be able to send a email for an inexistent user\", async () => {\n    const sendMail = spyOn(mailProvider, \"sendMail\");\n    await expect(\n      sendForgotPasswordMailUseCase.execute(\"cucok@soson.au\")\n    ).rejects.toBeInstanceOf(SendForgotPasswordMailError);\n\n    expect(sendMail).not.toBeCalled();\n  });\n\n  it(\"Should be able to create a new token to reset password\", async () => {\n    const generatedToken = spyOn(usersTokensRepositoryInMemory, \"create\");\n\n    await usersRepositoryInMemory.create({\n      email: \"tokvuzer@vadinvo.gn\",\n      name: \"Allie Jenkins\",\n      password: \"test\",\n    });\n    await sendForgotPasswordMailUseCase.execute(\"tokvuzer@vadinvo.gn\");\n\n    expect(generatedToken).toHaveBeenCalled();\n  });\n});\n","resolvedModuleNames":["/home/leo/Documentos/projetos/mine/TCC/StudeoUAI/backend/studeouai-api/src/modules/accounts/repositories/in-memory/UsersRepositoryInMemory.ts","/home/leo/Documentos/projetos/mine/TCC/StudeoUAI/backend/studeouai-api/src/modules/accounts/repositories/in-memory/UsersTokensRepositoryInMemory.ts","/home/leo/Documentos/projetos/mine/TCC/StudeoUAI/backend/studeouai-api/src/shared/container/providers/DateProvider/implementations/DayJsDateProvider.ts","/home/leo/Documentos/projetos/mine/TCC/StudeoUAI/backend/studeouai-api/src/shared/container/providers/MailProvider/in-memory/MailProviderInMemoy.ts","/home/leo/Documentos/projetos/mine/TCC/StudeoUAI/backend/studeouai-api/src/modules/accounts/useCases/sendForgotPasswordMail/SendForgotPasswordMailError.ts","/home/leo/Documentos/projetos/mine/TCC/StudeoUAI/backend/studeouai-api/src/modules/accounts/useCases/sendForgotPasswordMail/SendForgotPasswordMailUseCase.ts","/home/leo/Documentos/projetos/mine/TCC/StudeoUAI/backend/studeouai-api/src/modules/accounts/infra/typeorm/entities/User.ts","/home/leo/Documentos/projetos/mine/TCC/StudeoUAI/backend/studeouai-api/src/modules/accounts/dtos/ICreateUserDTO.ts","/home/leo/Documentos/projetos/mine/TCC/StudeoUAI/backend/studeouai-api/src/modules/accounts/repositories/IUsersRepository.ts","/home/leo/Documentos/projetos/mine/TCC/StudeoUAI/backend/studeouai-api/src/modules/accounts/dtos/ICreateUserTokenDTO.ts","/home/leo/Documentos/projetos/mine/TCC/StudeoUAI/backend/studeouai-api/src/modules/accounts/infra/typeorm/entities/UserTokens.ts","/home/leo/Documentos/projetos/mine/TCC/StudeoUAI/backend/studeouai-api/src/modules/accounts/repositories/IUsersTokensRepository.ts","/home/leo/Documentos/projetos/mine/TCC/StudeoUAI/backend/studeouai-api/src/shared/container/providers/DateProvider/IDateProvider.ts","/home/leo/Documentos/projetos/mine/TCC/StudeoUAI/backend/studeouai-api/src/shared/container/providers/MailProvider/IMailProvider.ts","/home/leo/Documentos/projetos/mine/TCC/StudeoUAI/backend/studeouai-api/src/shared/container/providers/MailProvider/IMailProviderSendMailDTO.ts","/home/leo/Documentos/projetos/mine/TCC/StudeoUAI/backend/studeouai-api/src/shared/errors/appError.ts"]}],["/home/leo/Documentos/projetos/mine/TCC/StudeoUAI/backend/studeouai-api/src/modules/accounts/repositories/in-memory/UsersRepositoryInMemory.ts",{"fileContent":"import { User } from \"@modules/accounts/infra/typeorm/entities/User\";\n\nimport { ICreateUserDTO } from \"../../dtos/ICreateUserDTO\";\nimport { IUsersRepository } from \"../IUsersRepository\";\n\nclass UsersRepositoryInMemory implements IUsersRepository {\n  users: User[] = [];\n\n  async getAll(): Promise<User[]> {\n    return this.users;\n  }\n\n  async create({\n    email,\n    name,\n    password,\n    avatar,\n  }: ICreateUserDTO): Promise<User> {\n    const user = new User();\n    Object.assign(user, {\n      email,\n      name,\n      password,\n      avatar,\n    });\n    this.users.push(user);\n    return user;\n  }\n\n  async findByEmail(email: string): Promise<User> {\n    const user = this.users.find((user) => user.email === email);\n    return user;\n  }\n\n  async findById(id: string): Promise<User> {\n    return this.users.find((user) => user.id === id);\n  }\n}\n\nexport { UsersRepositoryInMemory };\n","resolvedModuleNames":["/home/leo/Documentos/projetos/mine/TCC/StudeoUAI/backend/studeouai-api/src/modules/accounts/infra/typeorm/entities/User.ts","/home/leo/Documentos/projetos/mine/TCC/StudeoUAI/backend/studeouai-api/src/modules/accounts/dtos/ICreateUserDTO.ts","/home/leo/Documentos/projetos/mine/TCC/StudeoUAI/backend/studeouai-api/src/modules/accounts/repositories/IUsersRepository.ts"]}],["/home/leo/Documentos/projetos/mine/TCC/StudeoUAI/backend/studeouai-api/src/modules/accounts/infra/typeorm/entities/User.ts",{"fileContent":"import { Expose } from \"class-transformer\";\nimport { Column, CreateDateColumn, Entity, PrimaryColumn } from \"typeorm\";\nimport { v4 as uuidV4 } from \"uuid\";\n\n@Entity(\"users\")\nclass User {\n  @PrimaryColumn()\n  id: string;\n\n  @Column()\n  name: string;\n\n  @Column()\n  password: string;\n\n  @Column()\n  email: string;\n\n  @Column()\n  isAdmin: boolean;\n\n  @Column()\n  avatar: string;\n\n  @CreateDateColumn()\n  created_at: Date;\n\n  @Expose({ name: \"avatar_url\" })\n  avatar_url(): string {\n    switch (process.env.STORAGE_TYPE) {\n      case \"local\":\n        return `${process.env.APP_API_URL}/avatar/${this.avatar}`;\n      case \"s3\":\n        return `${process.env.AWS_BUCKET_URL}/avatar/${this.avatar}`;\n      default:\n        return null;\n    }\n  }\n\n  constructor() {\n    if (!this.id) {\n      this.id = uuidV4();\n    }\n  }\n}\n\nexport { User };\n","resolvedModuleNames":[]}],["/home/leo/Documentos/projetos/mine/TCC/StudeoUAI/backend/studeouai-api/src/modules/accounts/repositories/in-memory/UsersTokensRepositoryInMemory.ts",{"fileContent":"import { ICreateUserTokenDTO } from \"@modules/accounts/dtos/ICreateUserTokenDTO\";\nimport { UsersTokens } from \"@modules/accounts/infra/typeorm/entities/UserTokens\";\n\nimport { IUsersTokensRepository } from \"../IUsersTokensRepository\";\n\nclass UsersTokensRepositoryInMemory implements IUsersTokensRepository {\n  private usersTokens: UsersTokens[] = [];\n\n  async create(data: ICreateUserTokenDTO): Promise<UsersTokens> {\n    const userToken = new UsersTokens();\n    Object.assign(userToken, data);\n    this.usersTokens.push(userToken);\n    return userToken;\n  }\n\n  async findByUserIdAndRefreshToken(\n    user_id: string,\n    refresh_token: string\n  ): Promise<UsersTokens> {\n    return this.usersTokens.find(\n      (userToken) =>\n        userToken.user_id === user_id &&\n        userToken.refresh_token === refresh_token\n    );\n  }\n\n  async findByRefreshToken(token: string): Promise<UsersTokens> {\n    return this.usersTokens.find(\n      (userToken) => userToken.refresh_token === token\n    );\n  }\n\n  async deleteById(id: string): Promise<void> {\n    const userTokenIndex = this.usersTokens.findIndex(\n      (userToken) => userToken.id === id\n    );\n    this.usersTokens.splice(userTokenIndex, 1);\n  }\n}\n\nexport { UsersTokensRepositoryInMemory };\n","resolvedModuleNames":["/home/leo/Documentos/projetos/mine/TCC/StudeoUAI/backend/studeouai-api/src/modules/accounts/dtos/ICreateUserTokenDTO.ts","/home/leo/Documentos/projetos/mine/TCC/StudeoUAI/backend/studeouai-api/src/modules/accounts/infra/typeorm/entities/UserTokens.ts","/home/leo/Documentos/projetos/mine/TCC/StudeoUAI/backend/studeouai-api/src/modules/accounts/repositories/IUsersTokensRepository.ts","/home/leo/Documentos/projetos/mine/TCC/StudeoUAI/backend/studeouai-api/src/modules/accounts/infra/typeorm/entities/User.ts"]}],["/home/leo/Documentos/projetos/mine/TCC/StudeoUAI/backend/studeouai-api/src/modules/accounts/infra/typeorm/entities/UserTokens.ts",{"fileContent":"import {\n  Column,\n  CreateDateColumn,\n  Entity,\n  JoinColumn,\n  ManyToOne,\n  PrimaryColumn,\n} from \"typeorm\";\nimport { v4 as uuidV4 } from \"uuid\";\n\nimport { User } from \"./User\";\n\n@Entity(\"users_tokens\")\nclass UsersTokens {\n  @PrimaryColumn()\n  id: string;\n\n  @Column()\n  refresh_token: string;\n\n  @Column()\n  user_id: string;\n\n  @ManyToOne(() => User)\n  @JoinColumn({ name: \"user_id\" })\n  user: User;\n\n  @Column()\n  expires_date: Date;\n\n  @CreateDateColumn()\n  created_at: Date;\n\n  constructor() {\n    if (!this.id) {\n      this.id = uuidV4();\n    }\n  }\n}\n\nexport { UsersTokens };\n","resolvedModuleNames":["/home/leo/Documentos/projetos/mine/TCC/StudeoUAI/backend/studeouai-api/src/modules/accounts/infra/typeorm/entities/User.ts"]}],["/home/leo/Documentos/projetos/mine/TCC/StudeoUAI/backend/studeouai-api/src/shared/container/providers/DateProvider/implementations/DayJsDateProvider.ts",{"fileContent":"import dayjs from \"dayjs\";\nimport utc from \"dayjs/plugin/utc\";\n\nimport { IDateProvider } from \"../IDateProvider\";\n\ndayjs.extend(utc);\n\nclass DayjsDateProvider implements IDateProvider {\n  checkIsBefore(start_date: Date, end_date: Date): boolean {\n    return dayjs(start_date).isBefore(end_date);\n  }\n\n  compareInDays(start_date: Date, end_date: Date): number {\n    return dayjs(this.convertToUTC(end_date)).diff(\n      this.convertToUTC(start_date),\n      \"days\"\n    );\n  }\n\n  dateNow(): Date {\n    return dayjs().toDate();\n  }\n\n  addDays(days: number, reference_date: Date = null): Date {\n    const date = reference_date ? dayjs(reference_date) : dayjs();\n    return date.add(days, \"day\").toDate();\n  }\n\n  addHours(hours: number, reference_date: Date): Date {\n    const date = reference_date ? dayjs(reference_date) : dayjs();\n    return date.add(hours, \"hour\").toDate();\n  }\n\n  convertToUTC(date: Date): string {\n    return dayjs(date).utc().local().format();\n  }\n\n  compareInHours(start_date: Date, end_date: Date): number {\n    return dayjs(this.convertToUTC(end_date)).diff(\n      this.convertToUTC(start_date),\n      \"hours\"\n    );\n  }\n}\n\nexport { DayjsDateProvider };\n","resolvedModuleNames":["/home/leo/Documentos/projetos/mine/TCC/StudeoUAI/backend/studeouai-api/src/shared/container/providers/DateProvider/IDateProvider.ts"]}],["/home/leo/Documentos/projetos/mine/TCC/StudeoUAI/backend/studeouai-api/src/shared/container/providers/MailProvider/in-memory/MailProviderInMemoy.ts",{"fileContent":"import { IMailProvider } from \"../IMailProvider\";\nimport { IMailProviderSendMailDTO } from \"../IMailProviderSendMailDTO\";\n\nclass MailProviderInMemory implements IMailProvider {\n  private message: any[] = [];\n  async sendMail({\n    to,\n    subject,\n    variables,\n    path,\n  }: IMailProviderSendMailDTO): Promise<void> {\n    this.message.push({\n      to,\n      subject,\n      variables,\n      path,\n    });\n  }\n}\n\nexport { MailProviderInMemory };\n","resolvedModuleNames":["/home/leo/Documentos/projetos/mine/TCC/StudeoUAI/backend/studeouai-api/src/shared/container/providers/MailProvider/IMailProvider.ts","/home/leo/Documentos/projetos/mine/TCC/StudeoUAI/backend/studeouai-api/src/shared/container/providers/MailProvider/IMailProviderSendMailDTO.ts"]}],["/home/leo/Documentos/projetos/mine/TCC/StudeoUAI/backend/studeouai-api/src/modules/accounts/useCases/sendForgotPasswordMail/SendForgotPasswordMailError.ts",{"fileContent":"import { AppError } from \"@shared/errors/appError\";\n\nclass SendForgotPasswordMailError extends AppError {\n  constructor() {\n    super(\"User not found\");\n  }\n}\n\nexport { SendForgotPasswordMailError };\n","resolvedModuleNames":["/home/leo/Documentos/projetos/mine/TCC/StudeoUAI/backend/studeouai-api/src/shared/errors/appError.ts"]}],["/home/leo/Documentos/projetos/mine/TCC/StudeoUAI/backend/studeouai-api/src/modules/accounts/useCases/sendForgotPasswordMail/SendForgotPasswordMailUseCase.ts",{"fileContent":"import { resolve } from \"path\";\nimport { inject, injectable } from \"tsyringe\";\nimport { v4 as uuidV4 } from \"uuid\";\n\nimport { IUsersRepository } from \"@modules/accounts/repositories/IUsersRepository\";\nimport { IUsersTokensRepository } from \"@modules/accounts/repositories/IUsersTokensRepository\";\nimport { IDateProvider } from \"@shared/container/providers/DateProvider/IDateProvider\";\nimport { IMailProvider } from \"@shared/container/providers/MailProvider/IMailProvider\";\n\nimport { SendForgotPasswordMailError } from \"./SendForgotPasswordMailError\";\n\n@injectable()\nclass SendForgotPasswordMailUseCase {\n  constructor(\n    @inject(\"UsersRepository\")\n    private usersRepository: IUsersRepository,\n\n    @inject(\"UsersTokensRepository\")\n    private UsersTokensRepository: IUsersTokensRepository,\n\n    @inject(\"DayjsDateProvider\")\n    private dateProvider: IDateProvider,\n\n    @inject(\"MailProvider\")\n    private mailProvider: IMailProvider\n  ) {}\n\n  async execute(email: string): Promise<void> {\n    const user = await this.usersRepository.findByEmail(email);\n    if (!user) {\n      throw new SendForgotPasswordMailError();\n    }\n\n    const expires_date = this.dateProvider.addHours(3, null);\n    const token = uuidV4();\n    await this.UsersTokensRepository.create({\n      refresh_token: token,\n      user_id: user.id,\n      expires_date,\n    });\n\n    const templatePath = resolve(\n      __dirname,\n      \"..\",\n      \"..\",\n      \"views\",\n      \"emails\",\n      \"ForgotPassword.hbs\"\n    );\n\n    const templateVariables = {\n      name: user.name,\n      link: `${process.env.FORGOT_MAIL_URL}${token}`,\n    };\n    // FORGOT_MAIL_URL = http://localhost:3333/password/reset?token=\n\n    await this.mailProvider.sendMail({\n      to: user.email,\n      subject: \"Recuperação de senha\",\n      path: templatePath,\n      variables: templateVariables,\n    });\n  }\n}\n\nexport { SendForgotPasswordMailUseCase };\n","resolvedModuleNames":["/home/leo/Documentos/projetos/mine/TCC/StudeoUAI/backend/studeouai-api/src/modules/accounts/repositories/IUsersRepository.ts","/home/leo/Documentos/projetos/mine/TCC/StudeoUAI/backend/studeouai-api/src/modules/accounts/repositories/IUsersTokensRepository.ts","/home/leo/Documentos/projetos/mine/TCC/StudeoUAI/backend/studeouai-api/src/shared/container/providers/DateProvider/IDateProvider.ts","/home/leo/Documentos/projetos/mine/TCC/StudeoUAI/backend/studeouai-api/src/shared/container/providers/MailProvider/IMailProvider.ts","/home/leo/Documentos/projetos/mine/TCC/StudeoUAI/backend/studeouai-api/src/modules/accounts/useCases/sendForgotPasswordMail/SendForgotPasswordMailError.ts","/home/leo/Documentos/projetos/mine/TCC/StudeoUAI/backend/studeouai-api/src/modules/accounts/dtos/ICreateUserDTO.ts","/home/leo/Documentos/projetos/mine/TCC/StudeoUAI/backend/studeouai-api/src/modules/accounts/infra/typeorm/entities/User.ts","/home/leo/Documentos/projetos/mine/TCC/StudeoUAI/backend/studeouai-api/src/modules/accounts/dtos/ICreateUserTokenDTO.ts","/home/leo/Documentos/projetos/mine/TCC/StudeoUAI/backend/studeouai-api/src/modules/accounts/infra/typeorm/entities/UserTokens.ts","/home/leo/Documentos/projetos/mine/TCC/StudeoUAI/backend/studeouai-api/src/shared/container/providers/MailProvider/IMailProviderSendMailDTO.ts","/home/leo/Documentos/projetos/mine/TCC/StudeoUAI/backend/studeouai-api/src/shared/errors/appError.ts"]}],["/home/leo/Documentos/projetos/mine/TCC/StudeoUAI/backend/studeouai-api/src/modules/accounts/services/UserService.test.ts",{"fileContent":"import { repositoryMock } from '@modules/test/mock/typeorm.mock';\nimport CreateUserRequest from '../models/CreateUserRequest';\nimport CreateUserResponse from '../models/CreateUserResponse';\nimport UserService from './UserService';\n\nimport faker from 'faker';\nimport { AppError } from '@shared/errors/appError';\n\ndescribe('Test Pending Transaction Service', () => {\n  beforeEach(() => {\n    repositoryMock.find.mockRestore();\n    repositoryMock.findOne.mockRestore();\n    repositoryMock.save.mockRestore();\n    repositoryMock.update.mockRestore();\n  });\n\n  test('Should return response object when call to create with success', async () => {\n    const createUserReturnMock: CreateUserResponse = {\n      id: faker.datatype.uuid(),\n      name: faker.datatype.string(),\n      password: faker.datatype.string(),\n      email: faker.internet.email(),\n      isAdmin: false,\n      avatar: faker.datatype.string(),\n      avatar_url: faker.datatype.string(),\n    };\n\n    const createUserMock: CreateUserRequest = {\n      name: faker.datatype.uuid(),\n      password: faker.datatype.uuid(),\n      email: faker.internet.email(),\n      isAdmin: false,\n      avatar: faker.datatype.string(),\n    };\n\n    repositoryMock.create.mockResolvedValue(createUserReturnMock);\n\n    const userService = new UserService();\n    const response = await userService.createUser(createUserMock);\n\n    expect(response).toBe(createUserReturnMock);\n    expect(response).toBeTruthy();\n  });\n\n  test('Should error when try create a exists user', async () => {\n    const createUserReturnMock: CreateUserResponse = {\n      id: faker.datatype.uuid(),\n      name: faker.datatype.string(),\n      password: faker.datatype.string(),\n      email: faker.internet.email(),\n      isAdmin: false,\n      avatar: faker.datatype.string(),\n      avatar_url: faker.datatype.string(),\n    };\n\n    const createUserMock: CreateUserRequest = {\n      name: faker.datatype.uuid(),\n      password: faker.datatype.uuid(),\n      email: faker.internet.email(),\n      isAdmin: false,\n      avatar: faker.datatype.string(),\n    };\n\n    repositoryMock.create.mockResolvedValue(createUserReturnMock);\n\n    const userService = new UserService();\n    userService.createUser(createUserMock);\n    try {\n      userService.createUser(createUserMock);\n    } catch (err) {\n      console.log(err);\n      expect(err).toBeInstanceOf(AppError);\n      expect(err.message).toEqual('User already exists');\n    }\n  });\n\n  test('Should return response object when find user by id', async () => {\n    const createUserReturnMock: CreateUserResponse = {\n      id: faker.datatype.uuid(),\n      name: faker.datatype.string(),\n      password: faker.datatype.string(),\n      email: faker.internet.email(),\n      isAdmin: false,\n      avatar: faker.datatype.string(),\n      avatar_url: faker.datatype.string(),\n    };\n\n    repositoryMock.findOne.mockResolvedValue(createUserReturnMock);\n\n    const userService = new UserService();\n    const response = await userService.findUserById('Any_Value');\n\n    expect(response).toBe(createUserReturnMock);\n    expect(response).toBeTruthy();\n  });\n\n  test('Should return error when call to user by id', async () => {\n    repositoryMock.findOne.mockRejectedValue(\n      new AppError('User not found', 404),\n    );\n    const findUserById = new UserService();\n\n    try {\n      await findUserById.findUserById('Any_Value');\n    } catch (error) {\n      expect(error.message).toEqual('User not found');\n    }\n  });\n});\n","resolvedModuleNames":["/home/leo/Documentos/projetos/mine/TCC/StudeoUAI/backend/studeouai-api/src/modules/test/mock/typeorm.mock.ts","/home/leo/Documentos/projetos/mine/TCC/StudeoUAI/backend/studeouai-api/src/modules/accounts/models/CreateUserRequest.ts","/home/leo/Documentos/projetos/mine/TCC/StudeoUAI/backend/studeouai-api/src/modules/accounts/models/CreateUserResponse.ts","/home/leo/Documentos/projetos/mine/TCC/StudeoUAI/backend/studeouai-api/src/modules/accounts/services/UserService.ts","/home/leo/Documentos/projetos/mine/TCC/StudeoUAI/backend/studeouai-api/src/shared/errors/appError.ts","/home/leo/Documentos/projetos/mine/TCC/StudeoUAI/backend/studeouai-api/src/modules/accounts/typeorm/entities/User.ts","/home/leo/Documentos/projetos/mine/TCC/StudeoUAI/backend/studeouai-api/src/modules/accounts/typeorm/repositories/UsersRepository.ts"]}],["/home/leo/Documentos/projetos/mine/TCC/StudeoUAI/backend/studeouai-api/src/modules/accounts/services/UserService.ts",{"fileContent":"import { AppError } from '@shared/errors/appError';\nimport { hash } from 'bcryptjs';\nimport { getCustomRepository } from 'typeorm';\nimport CreateUserRequest from '../models/CreateUserRequest';\nimport { User } from '../typeorm/entities/User';\nimport { UsersRepository } from '../typeorm/repositories/UsersRepository';\n\nexport default class UserService {\n  async createUser({\n    name,\n    password,\n    email,\n    isAdmin,\n    avatar,\n  }: CreateUserRequest): Promise<User> {\n    const usersRepository = getCustomRepository(UsersRepository);\n    const emailExists = await usersRepository.findByEmail(email);\n\n    if (emailExists) {\n      throw new AppError('Email address already used.');\n    }\n\n    const passwordHash = await hash(\n      password,\n      Number(process.env.DEFAULT_HASH_SAULT),\n    );\n\n    const user = await usersRepository.create({\n      name,\n      password: passwordHash,\n      email,\n      isAdmin: false,\n      avatar: null,\n    });\n\n    await usersRepository.save(user);\n\n    return user;\n  }\n\n  async findUserById(id: string): Promise<User> {\n    const userRepository = getCustomRepository(UsersRepository);\n\n    const user = await userRepository.findOne(id);\n\n    if (!user) {\n      throw new AppError('User not found', 404);\n    }\n\n    return user;\n  }\n}\n","resolvedModuleNames":["/home/leo/Documentos/projetos/mine/TCC/StudeoUAI/backend/studeouai-api/src/shared/errors/appError.ts","/home/leo/Documentos/projetos/mine/TCC/StudeoUAI/backend/studeouai-api/src/modules/accounts/models/CreateUserRequest.ts","/home/leo/Documentos/projetos/mine/TCC/StudeoUAI/backend/studeouai-api/src/modules/accounts/typeorm/entities/User.ts","/home/leo/Documentos/projetos/mine/TCC/StudeoUAI/backend/studeouai-api/src/modules/accounts/typeorm/repositories/UsersRepository.ts"]}],["/home/leo/Documentos/projetos/mine/TCC/StudeoUAI/backend/studeouai-api/src/modules/accounts/useCases/createUser/createUserController.ts",{"fileContent":"import { Request, Response } from \"express\";\nimport { container } from \"tsyringe\";\n\nimport { CreateUserUseCase } from \"./createUserUseCase\";\n\nclass CreateUserController {\n  async handle(request: Request, response: Response): Promise<Response> {\n    const { name, email, password } = request.body;\n    const createUserUseCase = container.resolve(CreateUserUseCase);\n\n    await createUserUseCase.execute({\n      name,\n      email,\n      password,\n    });\n\n    return response.status(201).send();\n  }\n}\n\nexport { CreateUserController };\n","resolvedModuleNames":["/home/leo/Documentos/projetos/mine/TCC/StudeoUAI/backend/studeouai-api/src/modules/accounts/useCases/createUser/createUserUseCase.ts","/home/leo/Documentos/projetos/mine/TCC/StudeoUAI/backend/studeouai-api/src/modules/accounts/dtos/ICreateUserDTO.ts","/home/leo/Documentos/projetos/mine/TCC/StudeoUAI/backend/studeouai-api/src/modules/accounts/repositories/IUsersRepository.ts","/home/leo/Documentos/projetos/mine/TCC/StudeoUAI/backend/studeouai-api/src/modules/accounts/useCases/createUser/createUserError.ts"]}],["/home/leo/Documentos/projetos/mine/TCC/StudeoUAI/backend/studeouai-api/src/modules/accounts/useCases/createUser/createUserUseCase.ts",{"fileContent":"import { hash } from 'bcryptjs';\nimport { inject, injectable } from 'tsyringe';\n\nimport { ICreateUserDTO } from '@modules/accounts/dtos/ICreateUserDTO';\nimport { IUsersRepository } from '@modules/accounts/repositories/IUsersRepository';\n\nimport { CreateUserError } from './createUserError';\n\n@injectable()\nclass CreateUserUseCase {\n  constructor(\n    @inject('UsersRepository')\n    private usersRepository: IUsersRepository,\n  ) {}\n\n  async execute({ name, email, password }: ICreateUserDTO): Promise<void> {\n    const userAlreadyExists = await this.usersRepository.findByEmail(email);\n\n    if (userAlreadyExists) {\n      throw new CreateUserError();\n    }\n\n    const passwordHash = await hash(\n      password,\n      Number(process.env.DEFAULT_HASH_SAULT),\n    );\n\n    await this.usersRepository.create({\n      name,\n      email,\n      password: passwordHash,\n    });\n  }\n}\n\nexport { CreateUserUseCase };\n","resolvedModuleNames":["/home/leo/Documentos/projetos/mine/TCC/StudeoUAI/backend/studeouai-api/src/modules/accounts/dtos/ICreateUserDTO.ts","/home/leo/Documentos/projetos/mine/TCC/StudeoUAI/backend/studeouai-api/src/modules/accounts/repositories/IUsersRepository.ts","/home/leo/Documentos/projetos/mine/TCC/StudeoUAI/backend/studeouai-api/src/modules/accounts/useCases/createUser/createUserError.ts","/home/leo/Documentos/projetos/mine/TCC/StudeoUAI/backend/studeouai-api/src/modules/accounts/infra/typeorm/entities/User.ts","/home/leo/Documentos/projetos/mine/TCC/StudeoUAI/backend/studeouai-api/src/shared/errors/appError.ts"]}],["/home/leo/Documentos/projetos/mine/TCC/StudeoUAI/backend/studeouai-api/src/modules/accounts/useCases/createUser/createUserError.ts",{"fileContent":"import { AppError } from \"@shared/errors/appError\";\n\nclass CreateUserError extends AppError {\n  constructor() {\n    super(\"User already exists\");\n  }\n}\n\nexport { CreateUserError };\n","resolvedModuleNames":["/home/leo/Documentos/projetos/mine/TCC/StudeoUAI/backend/studeouai-api/src/shared/errors/appError.ts"]}],["/home/leo/Documentos/projetos/mine/TCC/StudeoUAI/backend/studeouai-api/src/modules/accounts/controllers/UserController.test.ts",{"fileContent":"import { User } from '@modules/accounts/infra/typeorm/entities/User';\nimport { AppError } from '@shared/errors/appError';\nimport 'reflect-metadata';\nimport UserController from './UserController';\nimport { getMockReq, getMockRes } from '@jest-mock/express';\nimport faker from 'faker';\nimport UserService from '../services/UserService';\nimport CreateUserRequest from '../models/CreateUserRequest';\n\njest.mock('../services/UserService');\n\nconst UserServiceMock = UserService as jest.MockedClass<typeof UserService>;\n\ndescribe('Test user controller', () => {\n  beforeEach(() => {\n    UserServiceMock.prototype.createUser.mockRestore();\n    UserServiceMock.prototype.findUserById.mockRestore();\n  });\n\n  test('Should response 201 when call execute() with success', async () => {\n    const idMock = faker.datatype.uuid();\n    const createUserReturnMock: User = {\n      id: idMock,\n      name: faker.datatype.string(),\n      password: faker.datatype.string(),\n      email: faker.internet.email(),\n      isAdmin: false,\n      avatar: faker.datatype.string(),\n      avatar_url: faker.datatype.string(),\n      created_at: new Date(),\n    };\n\n    const mockRequest = getMockReq({ params: { id: idMock } });\n    const { res, next } = getMockRes();\n\n    UserServiceMock.prototype.findUserById.mockResolvedValue(\n      createUserReturnMock,\n    );\n\n    await UserController.findUserById(mockRequest, res, next);\n\n    console.log(res);\n\n    expect(res.status).toBeCalledWith(200);\n  });\n});\n","resolvedModuleNames":["/home/leo/Documentos/projetos/mine/TCC/StudeoUAI/backend/studeouai-api/src/modules/accounts/infra/typeorm/entities/User.ts","/home/leo/Documentos/projetos/mine/TCC/StudeoUAI/backend/studeouai-api/src/shared/errors/appError.ts","/home/leo/Documentos/projetos/mine/TCC/StudeoUAI/backend/studeouai-api/src/modules/accounts/controllers/UserController.ts","/home/leo/Documentos/projetos/mine/TCC/StudeoUAI/backend/studeouai-api/src/modules/accounts/services/UserService.ts","/home/leo/Documentos/projetos/mine/TCC/StudeoUAI/backend/studeouai-api/src/modules/accounts/models/CreateUserRequest.ts","/home/leo/Documentos/projetos/mine/TCC/StudeoUAI/backend/studeouai-api/src/modules/accounts/typeorm/entities/User.ts","/home/leo/Documentos/projetos/mine/TCC/StudeoUAI/backend/studeouai-api/src/modules/accounts/typeorm/repositories/UsersRepository.ts"]}],["/home/leo/Documentos/projetos/mine/TCC/StudeoUAI/backend/studeouai-api/src/modules/accounts/controllers/UserController.ts",{"fileContent":"import { NextFunction, Request, Response } from 'express';\nimport UserService from '../services/UserService';\n\nasync function findUserById(\n  request: Request,\n  response: Response,\n  next: NextFunction,\n): Promise<Response> {\n  try {\n    const { id } = request.body;\n    const userService = new UserService();\n\n    const user = await userService.findUserById(id);\n\n    return response.json(user);\n  } catch (err) {\n    next();\n  }\n}\n\nasync function createUser(\n  request: Request,\n  response: Response,\n  next: NextFunction,\n): Promise<Response> {\n  try {\n    const { name, password, email, isAdmin, avatar } = request.body;\n\n    const createUser = new UserService();\n\n    const user = await createUser.createUser({\n      name,\n      password,\n      email,\n      isAdmin,\n      avatar,\n    });\n\n    return response.json(user);\n  } catch (err) {\n    next();\n  }\n}\n\nexport default {\n  createUser,\n  findUserById,\n};\n","resolvedModuleNames":["/home/leo/Documentos/projetos/mine/TCC/StudeoUAI/backend/studeouai-api/src/modules/accounts/services/UserService.ts","/home/leo/Documentos/projetos/mine/TCC/StudeoUAI/backend/studeouai-api/src/shared/errors/appError.ts","/home/leo/Documentos/projetos/mine/TCC/StudeoUAI/backend/studeouai-api/src/modules/accounts/models/CreateUserRequest.ts","/home/leo/Documentos/projetos/mine/TCC/StudeoUAI/backend/studeouai-api/src/modules/accounts/typeorm/entities/User.ts","/home/leo/Documentos/projetos/mine/TCC/StudeoUAI/backend/studeouai-api/src/modules/accounts/typeorm/repositories/UsersRepository.ts"]}],["/home/leo/Documentos/projetos/mine/TCC/StudeoUAI/backend/studeouai-api/src/modules/accounts/services/profile-service.test.ts",{"fileContent":"import { repositoryMock } from '@modules/test/mock/typeorm.mock';\nimport { ProfileService } from './profile-service';\nimport { ProfileResponse } from '../models/profile-response';\n\nimport faker from 'faker';\nimport { AppError } from '@shared/errors/appError';\n\ndescribe('Test Profile Service', () => {\n  beforeEach(() => {\n    repositoryMock.findOne.mockRestore();\n  });\n\n  test('Should return a profile with success', async () => {\n    const profileReturnMock: ProfileResponse = {\n      avatar: faker.datatype.string(),\n      avatar_url: faker.datatype.string(),\n      email: faker.internet.email(),\n      id: faker.datatype.uuid(),\n      name: faker.datatype.string(),\n    };\n\n    repositoryMock.findOne.mockResolvedValue(profileReturnMock);\n\n    const profileService = new ProfileService();\n    const response = await profileService.findProfileById('Any_Value');\n\n    expect(response).toBe(profileReturnMock);\n    expect(response).toBeTruthy();\n  });\n\n  test('Should return error when call to profile by id', async () => {\n    repositoryMock.findOne.mockRejectedValue(\n      new AppError('Profile not found', 404),\n    );\n    const profileById = new ProfileService();\n\n    try {\n      await profileById.findProfileById('Any_Value');\n    } catch (error) {\n      expect(error.message).toEqual('Profile not found');\n    }\n  });\n});\n","resolvedModuleNames":["/home/leo/Documentos/projetos/mine/TCC/StudeoUAI/backend/studeouai-api/src/modules/test/mock/typeorm.mock.ts","/home/leo/Documentos/projetos/mine/TCC/StudeoUAI/backend/studeouai-api/src/modules/accounts/services/profile-service.ts","/home/leo/Documentos/projetos/mine/TCC/StudeoUAI/backend/studeouai-api/src/modules/accounts/models/profile-response.ts","/home/leo/Documentos/projetos/mine/TCC/StudeoUAI/backend/studeouai-api/src/shared/errors/appError.ts","/home/leo/Documentos/projetos/mine/TCC/StudeoUAI/backend/studeouai-api/src/modules/accounts/typeorm/repositories/UsersRepository.ts"]}],["/home/leo/Documentos/projetos/mine/TCC/StudeoUAI/backend/studeouai-api/src/modules/accounts/services/profile-service.ts",{"fileContent":"import { AppError } from '@shared/errors/appError';\nimport { getCustomRepository } from 'typeorm';\nimport { ProfileResponse } from '../models/profile-response';\nimport { UsersRepository } from '../typeorm/repositories/UsersRepository';\n\nexport class ProfileService {\n  async findProfileById(id: string): Promise<ProfileResponse> {\n    const userRepository = getCustomRepository(UsersRepository);\n\n    const profile = await userRepository.findOne(id);\n\n    if (!profile) {\n      throw new AppError('Profile not found', 404);\n    }\n\n    return profile;\n  }\n}\n","resolvedModuleNames":["/home/leo/Documentos/projetos/mine/TCC/StudeoUAI/backend/studeouai-api/src/shared/errors/appError.ts","/home/leo/Documentos/projetos/mine/TCC/StudeoUAI/backend/studeouai-api/src/modules/accounts/models/profile-response.ts","/home/leo/Documentos/projetos/mine/TCC/StudeoUAI/backend/studeouai-api/src/modules/accounts/typeorm/repositories/UsersRepository.ts","/home/leo/Documentos/projetos/mine/TCC/StudeoUAI/backend/studeouai-api/src/modules/accounts/typeorm/entities/User.ts"]}],["/home/leo/Documentos/projetos/mine/TCC/StudeoUAI/backend/studeouai-api/src/modules/accounts/services/user-service.test.ts",{"fileContent":"import { repositoryMock } from '@modules/test/mock/typeorm.mock';\nimport { CreateUserRequest } from '../models/create-user-request';\nimport { UserResponse } from '../models/user-response';\nimport { UserService } from './user-service';\n\nimport faker from 'faker';\nimport { AppError } from '@shared/errors/appError';\n\ndescribe('Test User Service', () => {\n  beforeEach(() => {\n    repositoryMock.find.mockRestore();\n    repositoryMock.findOne.mockRestore();\n    repositoryMock.save.mockRestore();\n    repositoryMock.update.mockRestore();\n  });\n\n  test('Should return response with a new user when call to create with success', async () => {\n    const createUserReturnMock: UserResponse = {\n      id: faker.datatype.uuid(),\n      name: faker.datatype.string(),\n      password: faker.datatype.string(),\n      email: faker.internet.email(),\n      isAdmin: false,\n      avatar: faker.datatype.string(),\n      avatar_url: faker.datatype.string(),\n    };\n\n    const createUserMock: CreateUserRequest = {\n      name: faker.datatype.uuid(),\n      password: faker.datatype.uuid(),\n      email: faker.internet.email(),\n    };\n\n    repositoryMock.create.mockResolvedValue(createUserReturnMock);\n\n    const userService = new UserService();\n    const response = await userService.createUser(createUserMock);\n\n    expect(response).toBe(createUserReturnMock);\n    expect(response).toBeTruthy();\n  });\n\n  test('Should error when try create a exists user', async () => {\n    const createUserReturnMock: UserResponse = {\n      id: faker.datatype.uuid(),\n      name: faker.datatype.string(),\n      password: faker.datatype.string(),\n      email: faker.internet.email(),\n      isAdmin: false,\n      avatar: faker.datatype.string(),\n      avatar_url: faker.datatype.string(),\n    };\n\n    const createUserMock: CreateUserRequest = {\n      name: faker.datatype.uuid(),\n      password: faker.datatype.uuid(),\n      email: faker.internet.email(),\n    };\n\n    repositoryMock.create.mockResolvedValue(createUserReturnMock);\n\n    const userService = new UserService();\n    userService.createUser(createUserMock);\n    try {\n      userService.createUser(createUserMock);\n    } catch (err) {\n      expect(err).toBeInstanceOf(AppError);\n      expect(err.message).toEqual('User already exists');\n    }\n  });\n\n  test('Should return a user when find user by id', async () => {\n    const createUserReturnMock: UserResponse = {\n      id: faker.datatype.uuid(),\n      name: faker.datatype.string(),\n      password: faker.datatype.string(),\n      email: faker.internet.email(),\n      isAdmin: false,\n      avatar: faker.datatype.string(),\n      avatar_url: faker.datatype.string(),\n    };\n\n    repositoryMock.findOne.mockResolvedValue(createUserReturnMock);\n\n    const userService = new UserService();\n    const response = await userService.findUserById('Any_Value');\n\n    expect(response).toBe(createUserReturnMock);\n    expect(response).toBeTruthy();\n  });\n\n  test('Should return error when call to user by id', async () => {\n    repositoryMock.findOne.mockRejectedValue(\n      new AppError('User not found', 404),\n    );\n    const findUserById = new UserService();\n\n    try {\n      await findUserById.findUserById('Any_Value');\n    } catch (error) {\n      expect(error.message).toEqual('User not found');\n    }\n  });\n});\n","resolvedModuleNames":["/home/leo/Documentos/projetos/mine/TCC/StudeoUAI/backend/studeouai-api/src/modules/test/mock/typeorm.mock.ts","/home/leo/Documentos/projetos/mine/TCC/StudeoUAI/backend/studeouai-api/src/modules/accounts/models/create-user-request.ts","/home/leo/Documentos/projetos/mine/TCC/StudeoUAI/backend/studeouai-api/src/modules/accounts/models/user-response.ts","/home/leo/Documentos/projetos/mine/TCC/StudeoUAI/backend/studeouai-api/src/modules/accounts/services/user-service.ts","/home/leo/Documentos/projetos/mine/TCC/StudeoUAI/backend/studeouai-api/src/shared/errors/appError.ts","/home/leo/Documentos/projetos/mine/TCC/StudeoUAI/backend/studeouai-api/src/modules/accounts/typeorm/entities/User.ts","/home/leo/Documentos/projetos/mine/TCC/StudeoUAI/backend/studeouai-api/src/modules/accounts/typeorm/repositories/UsersRepository.ts"]}],["/home/leo/Documentos/projetos/mine/TCC/StudeoUAI/backend/studeouai-api/src/modules/accounts/services/user-service.ts",{"fileContent":"import { AppError } from '@shared/errors/appError';\nimport { hash } from 'bcryptjs';\nimport { getCustomRepository } from 'typeorm';\nimport { CreateUserRequest } from '../models/create-user-request';\nimport { User } from '../typeorm/entities/User';\nimport { UsersRepository } from '../typeorm/repositories/UsersRepository';\n\nexport class UserService {\n  async createUser({\n    name,\n    password,\n    email,\n  }: CreateUserRequest): Promise<User> {\n    const usersRepository = getCustomRepository(UsersRepository);\n    const emailExists = await usersRepository.findByEmail(email);\n\n    if (emailExists) {\n      throw new AppError('Email address already used.');\n    }\n\n    const passwordHash = await hash(\n      password,\n      Number(process.env.DEFAULT_HASH_SAULT),\n    );\n\n    const user = await usersRepository.create({\n      name,\n      password: passwordHash,\n      email,\n      isAdmin: false,\n      avatar: null,\n    });\n\n    await usersRepository.save(user);\n\n    return user;\n  }\n\n  async findUserById(id: string): Promise<User> {\n    const userRepository = getCustomRepository(UsersRepository);\n\n    const user = await userRepository.findOne(id);\n\n    if (!user) {\n      throw new AppError('User not found', 404);\n    }\n\n    return user;\n  }\n}\n","resolvedModuleNames":["/home/leo/Documentos/projetos/mine/TCC/StudeoUAI/backend/studeouai-api/src/shared/errors/appError.ts","/home/leo/Documentos/projetos/mine/TCC/StudeoUAI/backend/studeouai-api/src/modules/accounts/models/create-user-request.ts","/home/leo/Documentos/projetos/mine/TCC/StudeoUAI/backend/studeouai-api/src/modules/accounts/typeorm/entities/User.ts","/home/leo/Documentos/projetos/mine/TCC/StudeoUAI/backend/studeouai-api/src/modules/accounts/typeorm/repositories/UsersRepository.ts"]}]]